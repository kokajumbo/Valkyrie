////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеСлужебныйКлиент: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  ТекстЗаголовка - Строка - текст заголовка оповещения пользователя;
//  КолСформированных - Число - количество сформированных электронных документов;
//  КолУтвержденных - Число -  количество утвержденных электронных документов;
//  КолПодписанных - Число -  количество подписанных электронных документов;
//  КолПодготовленных - Число -  количество подготовленных к отправке электронных документов;
//  КолОтправленных - Число - количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(ТекстЗаголовка, КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных, КолОтправленных = 0) Экспорт
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, НСтр("ru = 'отправлено'"), НСтр("ru = 'подготовлено к отправке'"));
		Количество = ?(КолОтправленных > 0, КолОтправленных, КолПодготовленных);
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, Количество);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						Количество);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, Количество);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Количество = Макс(КолПодготовленных, КолОтправленных);
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, Количество);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
	
КонецПроцедуры

// Выводит сообщение пользователю о нехватке прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	ЭлектронноеВзаимодействиеКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив.
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено.
//
Функция МассивПараметров(ПараметрКоманды) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент Из ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла;
			
			Возврат МассивСсылок;
		КонецЕсли;
	#КонецЕсли
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	Иначе // пришла единичная ссылка на объект
		Если НЕ ЗначениеЗаполнено(ПараметрКоманды) Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Осуществляет подсчет количество подписанных электронных документов.
// 
// Параметры:
//   РезультатВыполнения - Структура - возвращает метод ЭлектроннаяПодписьКлиент.Подписать.
//
// Возвращаемое значение:
//    Число - количество подписанных документов.
//
Функция КоличествоПодписанныхЭД(РезультатВыполнения) Экспорт
	
	КолВоПодписанных = 0;
	
	НаборДанных = Неопределено;
	РезультатВыполнения.Свойство("НаборДанных", НаборДанных);
	Если НаборДанных = Неопределено Тогда
		Возврат КолВоПодписанных;
	КонецЕсли;
	
	Успех = Неопределено;
	РезультатВыполнения.Свойство("Успех", Успех);
	Если Успех = Неопределено Тогда
		Возврат КолВоПодписанных;
	КонецЕсли;
	
	Если Успех Тогда
		КолВоПодписанных = НаборДанных.Количество();
		Возврат КолВоПодписанных;
	КонецЕсли;
	
	// Если в во входящих параметрах свойство "Успех" ложь,
	// то посчитаем кол-во подписанных ЭД
	// если из 3 переданных ЭД подписали 2.
	Для Каждого ЭлементМассива Из НаборДанных Цикл
		Если ЭлементМассива.Свойство("СтруктураПодписи") Тогда
			КолВоПодписанных = КолВоПодписанных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолВоПодписанных;
	
КонецФункции

Процедура ОткрытьВыборМаршрутаПодписания(ФормаВладелец, АдресПараметровВыбораМаршрута, Организация, 
	ОповещениеОЗакрытии = Неопределено, ТолькоПросмотр = Ложь) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура("ПараметрыМаршрута, Организация, ТолькоПросмотр", 
		АдресПараметровВыбораМаршрута, Организация, ТолькоПросмотр);
	ОткрытьФорму("Справочник.МаршрутыПодписания.Форма.ВыборМаршрута", ПараметрыОткрытияФормы, ФормаВладелец, 
		ФормаВладелец.УникальныйИдентификатор,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

// Формирует представление ошибки подписания по переданному ключу.
//
// Параметры:
//  КлючОшибки	 - Строка - идентификатор ошибки.
// 
// Возвращаемое значение:
//  Строка - представление ошибки.
//
Функция ПредставлениеОшибкиПодписания(КлючОшибки) Экспорт
	
	Результат = "";
	Если КлючОшибки = "ОшибкиВМаршруте" Тогда
		Результат = НСтр("ru = 'Для подписания документа есть доступные сертификаты, но подписи по ним уже установлены. Проверьте настройки маршрута подписания.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

#Область ДлительныеОперации

// Заполняет структуру параметров значениями по умолчанию.
// 
// Параметры:
//  ПараметрыОбработчикаОжидания - Структура - заполняется значениями по умолчанию. 
//
// 
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
КонецПроцедуры

// Заполняет структуру параметров новыми расчетными значениями.
// 
// Параметры:
//  ПараметрыОбработчикаОжидания - Структура - заполняется расчетными значениями. 
//
// 
Процедура ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтборов

// Процедура вызывается при выборе значения в дереве отборов.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   ПредставлениеОтбора      - ПолеФормы          - поле формы дерева отборов "ПредставлениеОтбора".
//   Представление            - ПолеФормы          - поле формы колонки дерева отборов "Представление".
//   ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//   СтруктураОписанияТипов   - Структура:
//      * ЧастиДаты                - ЧастиДаты - части даты.
//      * ДлинаЧисла               - Число     - длина вводимого числа.
//      * ТочностьЧисла            - Число     - разрядность вводимого числа.
//      * ДлинаСтроки              - Число     - длина вводимой строки.
//      * РазрешенаМногострочность - Булево    - признак использования многострочности.
//
Процедура ДеревоОтборовВыбор(ДеревоОтборов, Знач ПредставлениеОтбора, Знач Представление,
			Знач ОповещениеПослеОбработки = Неопределено, Знач СтруктураОписанияТипов = Неопределено) Экспорт
	
	ТекущийЭлемент = ДеревоОтборов.ТекущийЭлемент;
	Если НЕ ТекущийЭлемент = ПредставлениеОтбора
		И НЕ ТекущийЭлемент = Представление Тогда
		Возврат;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(ДеревоОтборов);
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	Если ВариантДействий = 1 Тогда // нажали на поле с типом Дата или Число на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 3 Тогда // нажали на поле с типом Строка на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСтроки(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 5 Тогда // нажали на поле с типом "СписокЗначений" на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 2 ИЛИ ВариантДействий = 4 Тогда // нажали на гиперссылку с "не фиксированным" значением
		ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки);
	КонецЕсли;
	
	Если ВариантДействий = 1 ИЛИ ВариантДействий = 3 ИЛИ ВариантДействий = 5 Тогда
		ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
		ОткрытьФорму("ОбщаяФорма.УстановкаИнтервала", СтруктураПараметров, ЭтотОбъект, , , ,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Вызывается при изменении значения в дереве отборов по свойствам.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   ОповещениеПослеОбработки - ОписаниеОповещения - операция, которую нужно будет вызвать после
//                                                   выполнения обработки данных при изменении.
//   СтруктураОписанияТипов   - Структура:
//      * ЧастиДаты                - ЧастиДаты - части даты.
//      * ДлинаЧисла               - Число     - длина вводимого числа.
//      * ТочностьЧисла            - Число     - разрядность вводимого числа.
//      * ДлинаСтроки              - Число     - длина вводимой строки.
//      * РазрешенаМногострочность - Булево    - признак использования многострочности.
//
Процедура ДеревоОтборовОтборПриИзменении(ДеревоОтборов, ОповещениеПослеОбработки = Неопределено,
			СтруктураОписанияТипов = Неопределено) Экспорт
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(ДеревоОтборов);
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	Если ВариантДействий = 3 Тогда // нажали на поле с типом Строка на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 4 Тогда // нажали на поле с типом Дата или Число на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСтроки(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 5 Тогда // нажали на поле с типом "СписокЗначений" на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 7 Тогда // установили флажок на строке с незаполненным "не фиксированным" значением
		ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
	Если ВариантДействий = 3 ИЛИ ВариантДействий = 4 ИЛИ ВариантДействий = 5 Тогда
		ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
		ОткрытьФорму("ОбщаяФорма.УстановкаИнтервала", СтруктураПараметров, ЭтотОбъект, , , ,
			Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Возвращает строковое представление интервала отбора.
//
// Параметры:
//  ИнтервалОт - Число, Строка, Дата - начальное значение интервала,
//  ИнтервалДо - Число, Строка, Дата - конечное значение интервала.
//
// Возвращаемое значение:
//  Строка - представление интервала.
//
Функция ПредставлениеИнтервалаОтбора(Знач ИнтервалОт, Знач ИнтервалДо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИнтервалОт)
		И НЕ ЗначениеЗаполнено(ИнтервалДо) Тогда
		
		ПредставлениеОтбора =  НСтр("ru = '<не задано>'");
		Возврат ПредставлениеОтбора;
	КонецЕсли;
	
	ПредставлениеОтбораОт = "";
	ПредставлениеОтбораДо = "";
	
	Если ЗначениеЗаполнено(ИнтервалОт) Тогда
		ЗначениеИнтервалаОт = ?(ТипЗнч(ИнтервалОт) = Тип("Дата"), Формат(ИнтервалОт, "ДЛФ=ДД"), ИнтервалОт);
		ПредставлениеОтбораОт = НСтр("ru = 'от'") + " " + ЗначениеИнтервалаОт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтервалДо) Тогда
		ЗначениеИнтервалаДо = ?(ТипЗнч(ИнтервалДо) = Тип("Дата"), Формат(ИнтервалДо, "ДЛФ=ДД"), ИнтервалДо);
		ПредставлениеОтбораДо = НСтр("ru = 'до'") + " " + ЗначениеИнтервалаДо;
	КонецЕсли;
	
	ПредставлениеОтбора = СтрШаблон("%1 %2", ПредставлениеОтбораОт, ПредставлениеОтбораДо);
	
	Возврат ПредставлениеОтбора;
	
КонецФункции

#КонецОбласти

#Область Криптография

Функция НовыеПараметрыЗаполненияСертификатаКриптографии() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация");
	Параметры.Вставить("Программа");
	
	Возврат Параметры;
	
КонецФункции

Процедура НачатьДобавлениеСертификатаКриптографии(Знач Сертификат, Знач ПараметрыЗаполнения, Знач ОбработкаЗавершения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Сертификат", Сертификат);
	Контекст.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьДобавлениеСертификатаКриптографии_ВыгрузкаСертификата", ЭтотОбъект, Контекст);
	Сертификат.НачатьВыгрузку(ОбработкаПродолжения);
	
КонецПроцедуры

Процедура НачатьОпределениеПрограммыСертификатаКриптографии(Знач Сертификат, Знач ОбработкаЗавершения, Знач Пароль = Неопределено) Экспорт
	
	ПроцессВыполнения = НовыйПроцессОпределенияПрограммыСертификатаКриптографии(Сертификат, ОбработкаЗавершения, Пароль);
	
	ВыполнитьОпределениеПрограммыСертификатаКриптографии(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение ссылок объектов из формы
//
// Параметры:
//  Источник - ТаблицаФормы, Объект - данные формы.
//
// Возвращаемое значение:
//  Массив - ссылки на объекты.
//
Функция ОбъектыОснований(Источник)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаФормы") Тогда
		ВыделенныеСтроки = Источник.ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСтрока = Источник.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущаяСтрока <> Неопределено Тогда
				Результат.Добавить(ТекущаяСтрока.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат.Добавить(Источник.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполнение команды после подтверждения записи
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - результат вопроса.
//  ДополнительныеПараметры - Структура - параметры выполняемой команды.
//
Процедура ВыполнитьПодключаемуюКомандуЭДОПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	Форма = ДополнительныеПараметры.Форма;
	Источник = ДополнительныеПараметры.Источник;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Форма.Записать();
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		Если Не ПустаяСтрока(ОписаниеКоманды.Обработчик) 
			И СтрНачинаетсяС(ОписаниеКоманды.Обработчик, "ОбменСБанками") Тогда 
			
			Оповестить("ОбновитьСостояниеОбменСБанками");
		Иначе
			
			
			ДокументыУчета = Новый Массив;
			ДокументыУчета.Добавить(Источник.Ссылка);
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
			
			Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
			
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыОснований = ДополнительныеПараметры.Источник;
	Если ТипЗнч(ОбъектыОснований) <> Тип("Массив") Тогда
		ОбъектыОснований = ОбъектыОснований(ОбъектыОснований);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОбъектыОснований", ОбъектыОснований);
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	Форма = ДополнительныеПараметры.Форма;
	ОбъектыОснований = ДополнительныеПараметры.ОбъектыОснований;
	
	ОписаниеКоманды = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ОписаниеКоманды, Ложь);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОбъектыОснований;
		ОписаниеКоманды.Вставить("ПараметрКоманды", ОбъектыОснований);
	Иначе
		Если ОбъектыОснований.Количество() Тогда
			ПараметрКоманды = ОбъектыОснований[0];
		Иначе
			ПараметрКоманды = Неопределено;
		КонецЕсли;
		ОписаниеКоманды.Вставить("ПараметрКоманды", ПараметрКоманды);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеКоманды.Обработчик) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКоманды.Вставить("Источник", Форма);
	ОписаниеКоманды.Вставить("Уникальность", Ложь);
	
	МассивИмениОбработчика = СтрРазделить(ОписаниеКоманды.Обработчик, ".");
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивИмениОбработчика[0]);
	Обработчик = Новый ОписаниеОповещения(МассивИмениОбработчика[1], МодульОбработки, ОписаниеКоманды);
	ВыполнитьОбработкуОповещения(Обработчик, ПараметрКоманды);
	
КонецПроцедуры

#Область РаботаСДеревомОтборов

// Открывает форму для ввода данных.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   СтруктураОписанияТипов   - Структура:
//      *ЧастиДаты                - ЧастиДаты - части даты.
//      *ДлинаЧисла               - Число     - длина вводимого числа.
//      *ТочностьЧисла            - Число     - разрядность вводимого числа.
//      *ДлинаСтроки              - Число     - длина вводимой строки.
//      *РазрешенаМногострочность - Булево    - признак использования многострочности.
//   ОповещениеПослеОбработки - ОписаниеОповещения - операция, которую нужно будет вызвать после
//                                                   выполнения обработки ввода данных.
//
Процедура ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки = Неопределено, ЗначениеОтбора = Неопределено)
	
	ТекущиеДанные     = ДеревоОтборов.ТекущиеДанные;
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ЗначениеОтбора = Неопределено Тогда
		ЗначениеОтбора    = ТекущиеДанные.ЗначениеОтбора;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные");
	ДополнительныеПараметры.Вставить("ОповещениеПослеОбработки" , ОповещениеПослеОбработки);
	ДополнительныеПараметры.Вставить("ТекущиеДанные"            , ТекущиеДанные);
	ДополнительныеПараметры.Вставить("СтруктураОписанияТипов"   , СтруктураОписанияТипов);
	ДополнительныеПараметры.Вставить("ДеревоОтборов"            , ДеревоОтборов);
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ВывестиПолеВводаДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// параметры ввода данных по умолчанию.
	ТипДаты                  = ЧастиДаты.Дата;
	ДлинаЧисла               = 15;
	ТочностьЧисла            = 3;
	ДлинаСтроки              = 0;
	РазрешенаМногострочность = Истина;
	
	Если ТипЗначенияОтбора = Тип("Дата") Тогда
		Если СтруктураОписанияТипов <> Неопределено
			И СтруктураОписанияТипов.Свойство("ЧастиДаты") Тогда
			ТипДаты = СтруктураОписанияТипов.ЧастиДаты;
		КонецЕсли;
		ПоказатьВводДаты(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ТипДаты);
	ИначеЕсли ТипЗначенияОтбора = Тип("Число") Тогда
		Если СтруктураОписанияТипов <> Неопределено Тогда
			Если СтруктураОписанияТипов.Свойство("ДлинаЧисла") Тогда
				ДлинаЧисла = СтруктураОписанияТипов.ДлинаЧисла;
			КонецЕсли;
			Если СтруктураОписанияТипов.Свойство("ТочностьЧисла") Тогда
				ТочностьЧисла = СтруктураОписанияТипов.ТочностьЧисла;
			КонецЕсли;
		КонецЕсли;

		ПоказатьВводЧисла(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ДлинаЧисла, ТочностьЧисла);
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		Если СтруктураОписанияТипов <> Неопределено Тогда
			Если СтруктураОписанияТипов.Свойство("ДлинаСтроки") Тогда
				ДлинаСтроки = СтруктураОписанияТипов.ДлинаСтроки;
			КонецЕсли;
			Если СтруктураОписанияТипов.Свойство("Многострочность") Тогда
				РазрешенаМногострочность = СтруктураОписанияТипов.Многострочность;
			КонецЕсли;
		КонецЕсли;

		ПоказатьВводСтроки(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ДлинаСтроки, РазрешенаМногострочность);
	КонецЕсли;

КонецПроцедуры

// Обрабатывает результат вводимых данных.
//
// Параметры:
//  ЗначениеВыбора          - Число - вводимое значение на форме ввода данных.
//  ДополнительныеПараметры - Структура:
//    * ОповещениеПослеОбработки - ОписаниеОповещения       - операция, которую нужно будет вызвать после
//                                                           выполнения обработки ввода данных.
//    * ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Процедура ВывестиПолеВводаДанныхЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
		
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные            = ДополнительныеПараметры.ТекущиеДанные;
	УстанавливатьОтбор       = Ложь;
	
	Если ЗначениеВыбора <> Неопределено Тогда
		Если ЗначениеВыбора <> ТекущиеДанные.ЗначениеОтбора Тогда
			
			Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
				ТипЗначения = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
				Если ТипЗначения = Тип("Число") Тогда
					Если ПроверитьВыбранноеЧислоНаДопустимость(ЗначениеВыбора, ТекущиеДанные, ДополнительныеПараметры) Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеВыбора;
			Если НЕ ЗначениеЗаполнено(ЗначениеВыбора) Тогда
				ПредставлениеОтбора = НСтр("ru = '<не задано>'");
			ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Дата") Тогда
				ПредставлениеОтбора = Формат(ЗначениеВыбора, "ДЛФ=ДД");
			Иначе
				ПредставлениеОтбора = ЗначениеВыбора;
			КонецЕсли;
			ТекущиеДанные.ПредставлениеОтбора = ПредставлениеОтбора;
			УстанавливатьОтбор                = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора);
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтбор);
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыбранноеЧислоНаДопустимость(ЗначениеВыбора, ТекущиеДанные, ДополнительныеПараметры)
	
	НеверноеЗначение     = Ложь;
	МаксимальноеЗначение = ТекущиеДанные.МаксимальноеЗначение;
	МинимальноеЗначение  = ТекущиеДанные.МинимальноеЗначение;
	
	Если ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
		МаксимальноеЗначение = Число(МаксимальноеЗначение);
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора > МаксимальноеЗначение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальноеЗначение) Тогда
		МинимальноеЗначение  = Число(МинимальноеЗначение);
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора < МинимальноеЗначение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МаксимальноеЗначение)
		И НЕ ЗначениеЗаполнено(МинимальноеЗначение) Тогда
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора < 0;
	КонецЕсли;
	
	Если НеверноеЗначение Тогда
		ОчиститьСообщения();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Указано неверное значение. %1 %2'"),
			?(ЗначениеЗаполнено(МинимальноеЗначение), НСтр("ru = 'Минимально значение:'") + " " + ТекущиеДанные.МинимальноеЗначение + ". ", ""),
			?(ЗначениеЗаполнено(МаксимальноеЗначение), НСтр("ru = 'Максимальное значение:'") + " " + ТекущиеДанные.МаксимальноеЗначение, ""));
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВывестиПолеВводаДанных(ДополнительныеПараметры.ДеревоОтборов, ДополнительныеПараметры.СтруктураОписанияТипов,
			ДополнительныеПараметры.ОповещениеПослеОбработки, ЗначениеВыбора);
			
		Возврат Истина;
		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

// Обрабатывает результат вводимых данных на форме установки интервала.
//
// Параметры:
//  ЗначениеВыбора         - Структура:
//    * ИнтервалОт     - Число, Дата             - выбранное значение на форме.
//    * ИнтервалДо     - Число, Дата             - выбранное значение на форме.
//    * ЗначениеОтбора - Строка, СписокЗначений  - выбранное значение на форме.
//  ДополнительныеПараметры - Структура:
//    * ОповещениеПослеОбработки - ОписаниеОповещения       - операция, которую нужно будет вызвать после
//                                                           выполнения заполнения фиксированного отбора.
//    * ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Процедура УстановитьФиксированныйОтборЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	УстанавливатьОтборСписка = Ложь;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("Число") ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		Если ЗначениеВыбора <> Неопределено Тогда
			
			Если ЗначениеВыбора.ИнтервалОт <> ТекущиеДанные.ИнтервалОт
				Или ЗначениеВыбора.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
				
				ТекущиеДанные.ИнтервалОт = ЗначениеВыбора.ИнтервалОт;
				ТекущиеДанные.ИнтервалДо = ЗначениеВыбора.ИнтервалДо;
				ТекущиеДанные.ПредставлениеОтбора = ПредставлениеИнтервалаОтбора(ЗначениеВыбора.ИнтервалОт, ЗначениеВыбора.ИнтервалДо);
				
				УстанавливатьОтборСписка = Истина;
				
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалОт) Или ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалДо);
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				ТекущиеДанные.Отбор = ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо);
			КонецЕсли;
			
			УстанавливатьОтборСписка = Ложь;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			Если ТекущиеДанные.ЗначениеОтбора <> ЗначениеОтбора Тогда
				
				ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
				ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
				
				УстанавливатьОтборСписка = Истина;
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеОтбора);
			
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеОтбора);
			КонецЕсли;
			
			УстанавливатьОтборСписка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
	КонецЕсли;

КонецПроцедуры

// Возвращает параметры текущей строки с типом "Строка" в поле "ЗначениеОтбора", передаваемые в форму установки интервала.
//
// Параметры:
//   ТекущиеДанные - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровСтроки(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОтбора",          ТекущиеДанные.ЗначениеОтбора);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	СтруктураПараметров.Вставить("ПодсказкаВвода",          ТекущиеДанные.ПредставлениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры текущей строки с типом "Число" или "Дата" в поле "ЗначениеОтбора",
// передаваемые в форму установки интервала.
// В дополнение к обязательным колонкам (см. ДеревоОтборовВыбор) дерева при работе с типом Число или Дата необходимы колонки:
//    ИнтервалОт            - Дата, Число.
//    ИнтервалДо            - Дата, Число.
//    МаксимальноеЗначение  - Строка.
//    МинимальноеЗначение   - Строка.
//
// Параметры:
//   ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОт",              ТекущиеДанные.ИнтервалОт);
	СтруктураПараметров.Вставить("ЗначениеДо",              ТекущиеДанные.ИнтервалДо);
	СтруктураПараметров.Вставить("МаксимальноеЗначение",    ТекущиеДанные.МаксимальноеЗначение);
	СтруктураПараметров.Вставить("МинимальноеЗначение",     ТекущиеДанные.МинимальноеЗначение);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры текущей строки с типом "СписокЗначений" в поле "ЗначениеОтбора", передаваемые в форму установки интервала
// В дополнение к обязательным колонкам (см. ДеревоОтборовВыбор) дерева при работе с типом СписокЗначений необходима колонка:
//    СписокВыбора - СписокЗначений.
//
// Параметры:
//   ТекущиеДанные - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОтбора",          ТекущиеДанные.ЗначениеОтбора);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	СтруктураПараметров.Вставить("ПодсказкаВвода",          ТекущиеДанные.ПредставлениеОтбора);
	СтруктураПараметров.Вставить("СписокВыбора",            ТекущиеДанные.СписокВыбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает число - код варианта действий, которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//   ДеревоОтборов - ДанныеФормыДерево  - дерево отборов на форме (см. обязательные колонки в "ДеревоОтборовВыбор").
//
// Возвращаемое значение:
// Число.
//  0 - нажали на поле списка, если список не был развернут - развернется,
//  1 - было выбрано значение поля "ЗначениеОтбора" с типом Число или Дата в строке с "фиксированным" значением,
//  2 - было выбрано значение поля "ЗначениеОтбора" с типом Число или Дата с "не фиксированным" значением,
//  3 - было выбрано значение поля "ЗначениеОтбора" с типом строка с "фиксированным" значением,
//  4 - было выбрано значение поля "ЗначениеОтбора" с типом строка с "не фиксированным" значением,
//  5 - было выбрано значение поля "ЗначениеОтбора" с типом "СписокЗначений" с "фиксированным" значением.
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(ДеревоОтборов)
	
	ТекущиеДанные     = ДеревоОтборов.ТекущиеДанные;
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	ВариантДействий = 0;
	
	Если ТипЗначенияОтбора = Тип("Число")
		ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 1;
		Иначе
			ВариантДействий = 2;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка")
		И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 3;
		Иначе
			ВариантДействий = 4;
		КонецЕсли;
	ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 5;
		КонецЕсли;

	ИначеЕсли НЕ ТекущиеДанные.ОтборДоступен
		И ТекущиеДанные.ЗначениеОтбора = "Список" Тогда //
		
		ТекущаяСтрока = ДеревоОтборов.ТекущаяСтрока;
		Если ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
			ДеревоОтборов.Свернуть(ТекущаяСтрока);
		Иначе
			ДеревоОтборов.Развернуть(ТекущаяСтрока);
		КонецЕсли;

	КонецЕсли;
		
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает число - код варианта действия, которое было выполнено с деревом отборов.
//
// Параметры:
//   ДеревоОтборов - ДанныеФормыДерево  - дерево отборов на форме (см. обязательные колонки в "ДеревоОтборовВыбор").
//
// Возвращаемое значение: 
// Число.
// 0 - никакого изменения значений в дереве отборов не произошло;
// 1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
// 2 - был установлен/снят флажок на строке с "фиксированным значением", причем фиксированное
//    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//    кабеля и у него установили/сняли флажок;
// 3 - был УСТАНОВЛЕН флажок на строке с типом "Строка" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 4 -  был УСТАНОВЛЕН флажок на строке с типом "Число" или "Дата" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 5 -  был УСТАНОВЛЕН флажок на строке с типом "СписокЗначений" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 6 - был установлен/снят флажок на заполненной строке без признака "фиксированное значение".
// 7 - было выбрано значение с типом число, дата или строка без признака "фиксированное значение",
//    в этом случае откроется окно ввода числа или даты.
//
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(ДеревоОтборов)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение
		И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если ТипЗначенияОтбора = Тип("Строка") И НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значение с типом "Строка"
				
			ИначеЕсли (ТипЗначенияОтбора = Тип("Дата") ИЛИ ТипЗначенияОтбора = Тип("Число"))
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт)
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо) Тогда
				
				ВариантДействий = 4; // УСТАНОВИЛИ флажок на незаполненном значение с типом "Дата" или "Число"
				
			ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") И НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)Тогда
					
				ВариантДействий = 5; // УСТАНОВИЛИ флажок на незаполненном значение с типом "СписокЗначений"
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если (ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Число")
			ИЛИ ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Дата")
			ИЛИ ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Строка"))
			И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
			
			ВариантДействий = 6; // установили/сняли флажок на заполненном поле без признака "фиксированное значения"
			
			Если ТекущиеДанные.Отбор Тогда
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
					ВариантДействий = 7; //УСТАНОВИЛИ флажок на незаполненном значением поле без признака "фиксированное значения"
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
			
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			
			Если Родитель = Неопределено Тогда // выбрана строка-родитель
				
				// Установить/снять значение флажка отбора для всех подчиненных строк.
				
				ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
				
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
				КонецЦикла;
				
			Иначе
				
				// Выбрана подчиненная строка.
				
				Родитель.Отбор = Ложь;
				
				ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
				
				// Пройти по всем подчиненным строкам родителя выбранной строки, и если
				// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
				// и родительской строки.
				
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					
					Если ЭлементДерева.Отбор Тогда
						Родитель.Отбор = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

#КонецОбласти

#Область Криптография

#Область ДобавлениеСертификатаКриптографии

Процедура ЗавершитьДобавлениеСертификатаКриптографии(Знач Контекст)
	
	СсылкаНаСертификат = ЗаписатьСертификатКриптографииВСправочник(
		Контекст.ДвоичныеДанныеСертификата, Контекст.ПараметрыЗаполнения);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, СсылкаНаСертификат);
	
КонецПроцедуры

Процедура НачатьДобавлениеСертификатаКриптографии_ВыгрузкаСертификата(Знач ДвоичныеДанныеСертификата, Знач Контекст) Экспорт
	
	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	ЗавершитьДобавлениеСертификатаКриптографии(Контекст);
	
КонецПроцедуры

Функция ЗаписатьСертификатКриптографииВСправочник(Знач ДвоичныеДанныеСертификата, Знач ПараметрыЗаполнения)
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДвоичныеДанныеСертификата, ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Программа);
	
КонецФункции

#КонецОбласти

#Область ОпределениеПрограммыСертификатаКриптографии

Процедура ЗавершитьОпределениеПрограммыСертификатаКриптографии(Знач ПроцессВыполнения)
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, ПроцессВыполнения.Программа);
	
КонецПроцедуры

Функция НовыйПроцессОпределенияПрограммыСертификатаКриптографии(Знач Сертификат, Знач ОбработкаЗавершения, Знач Пароль)
	
	Процесс = Новый Структура;
	Процесс.Вставить("Сертификат", Сертификат);
	Процесс.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	Процесс.Вставить("ТекущийЭтап");
	
	Процесс.Вставить("УстановленныеПрограммы");
	Процесс.Вставить("НаборПрограмм");
	
	Процесс.Вставить("СвойстваПароля");
	Процесс.Вставить("Пароль", Пароль);
	
	Процесс.Вставить("ПрограммаДляПроверки");
	Процесс.Вставить("РезультатПроверкиПрограммы", Ложь);
	Процесс.Вставить("ПроверенныеПрограммы", Новый Массив);
	Процесс.Вставить("Программа");
	
	Возврат Процесс;
	
КонецФункции

Процедура ВыполнитьОпределениеПрограммыСертификатаКриптографии(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_НайтиУстановленныеПрограммы(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_ВводПароля(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_ПроверитьПрограммы(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьОпределениеПрограммыСертификатаКриптографии(ПроцессВыполнения);
	
КонецПроцедуры

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_НайтиУстановленныеПрограммы(ПроцессВыполнения)
	
	Выполнено = Ложь;
	
	УстановленныеПрограммы = ПроцессВыполнения.УстановленныеПрограммы;
	НаборПрограмм = ПроцессВыполнения.НаборПрограмм;
	
	Если ЗначениеЗаполнено(УстановленныеПрограммы) Тогда
		Если Не ЗначениеЗаполнено(НаборПрограмм) Тогда
			ПроцессВыполнения.НаборПрограмм = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСсылкиНаПрограммыКриптографии(УстановленныеПрограммы);
		КонецЕсли;
		Выполнено = Истина;
	ИначеЕсли ТипЗнч(УстановленныеПрограммы) = Тип("Массив") Тогда // ничего не нашли (пустой массив)
		ЗавершитьОпределениеПрограммыСертификатаКриптографии(ПроцессВыполнения);
	Иначе
		ПроцессВыполнения.Вставить("ТекущийЭтап", "УстановленныеПрограммы");
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии", ЭтотОбъект, ПроцессВыполнения);
		ОписаниеПрограмм = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОписаниеПрограммКриптографии();
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(ОбработкаПродолжения, ОписаниеПрограмм, Ложь);
	КонецЕсли;
	
	Возврат Выполнено;
	
КонецФункции

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_ВводПароля(ПроцессВыполнения)
	
	Выполнено = Ложь;
	
	СвойстваПароля = ПроцессВыполнения.СвойстваПароля;
	Если ТипЗнч(СвойстваПароля) = Тип("Структура") Тогда
		ПроцессВыполнения.Пароль = СвойстваПароля.Пароль;
	КонецЕсли;
	
	Если ПроцессВыполнения.Пароль = Неопределено Тогда
		ПроцессВыполнения.Вставить("ТекущийЭтап", "СвойстваПароля");
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии", ЭтотОбъект, ПроцессВыполнения);
		ПараметрыВвода = Новый Структура;
		ПараметрыВвода.Вставить("Заголовок", НСтр("ru = 'Проверка сертификата криптографии'"));
		ПараметрыВвода.Вставить("Подсказка", НСтр("ru = 'Введите пароль закрытого ключа сертификата:'"));
		ПоказатьВводПароля(ПараметрыВвода, ОбработкаПродолжения);
	Иначе
		Выполнено = Истина;
	КонецЕсли;
	
	Возврат Выполнено;
	
КонецФункции

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_ПроверитьПрограммы(ПроцессВыполнения)
	
	ПрограммаДляПроверки = ПроцессВыполнения.ПрограммаДляПроверки;
	РезультатПроверки = ПроцессВыполнения.РезультатПроверкиПрограммы;
	
	Если ЗначениеЗаполнено(ПрограммаДляПроверки) Тогда
		ПроцессВыполнения.ПроверенныеПрограммы.Добавить(ПрограммаДляПроверки);
		Если РезультатПроверки Тогда
			ПроцессВыполнения.Программа = ПрограммаДляПроверки;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НаборПрограмм = ПроцессВыполнения.НаборПрограмм;
	
	Для каждого Программа Из НаборПрограмм Цикл
		Если ПроцессВыполнения.ПроверенныеПрограммы.Найти(Программа) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроцессВыполнения.Вставить("ТекущийЭтап", "РезультатПроверкиПрограммы");
		ПроцессВыполнения.Вставить("ПрограммаДляПроверки", Программа);
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии", ЭтотОбъект, ПроцессВыполнения);
		НачатьПроверкуСертификатаКриптографииПрограммой(
			ПроцессВыполнения.Сертификат, ПроцессВыполнения.ПрограммаДляПроверки, ПроцессВыполнения.Пароль, ОбработкаПродолжения);
		Возврат Ложь;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура НачатьПроверкуСертификатаКриптографииПрограммой(Знач Сертификат, Знач Программа, Знач Пароль, Знач ОбработкаЗавершения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Сертификат", Сертификат);
	Контекст.Вставить("Программа", Программа);
	Контекст.Вставить("Пароль", Пароль);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_ВыгрузкаСертификата", ЭтотОбъект, Контекст);
	Сертификат.НачатьВыгрузку(ОбработкаПродолжения);
	
КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ВыгрузкаСертификата(Знач ДвоичныеДанныеСертификата, Знач Контекст) Экспорт
	
	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_СозданиеМенеджераКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОбработкаПродолжения, "Подписание", Истина, Контекст.Программа);
	
КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_СозданиеМенеджераКриптографии(Знач Менеджер, Знач Контекст) Экспорт
	
	Если ТипЗнч(Менеджер) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);
		Возврат;
	КонецЕсли;
	
	Менеджер.ПарольДоступаКЗакрытомуКлючу = Контекст.Пароль;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписания", ЭтотОбъект, Контекст,
		"НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписанияОшибка", ЭтотОбъект);
	
	Менеджер.НачатьПодписывание(ОбработкаПродолжения, Контекст.ДвоичныеДанныеСертификата, Контекст.Сертификат);
	
КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписания(Знач ДанныеПодписи, Знач Контекст) Экспорт
	
	Подписано = Истина;
	
	Попытка
		Подписано = ЗначениеЗаполнено(ДанныеПодписи);
	Исключение
		Подписано = Ложь;
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Подписано);
	
КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписанияОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСПользователем

Процедура ПоказатьВводПароля(Знач ПараметрыВвода, Знач ОбработкаПродолжения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "");
	ПараметрыФормы.Вставить("Подсказка", "");
	ПараметрыФормы.Вставить("ИспользоватьЗапоминание", Ложь);
	ПараметрыФормы.Вставить("ПодсказкаЗапоминания", "");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВвода);
	
	ОткрытьФорму("ОбщаяФорма.ВводПароляБЭД", ПараметрыФормы,,,,, ОбработкаПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
