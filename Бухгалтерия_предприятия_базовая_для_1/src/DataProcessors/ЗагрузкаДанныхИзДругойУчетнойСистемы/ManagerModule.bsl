#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПрочитатьДанныеДляЗагрузки(Параметры, АдресРезультата) Экспорт
	
	ДанныеЗагрузки = ПрочитатьФайл(Параметры);
	
	ПоместитьВоВременноеХранилище(ДанныеЗагрузки, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьДанные(ДанныеЗагрузки, АдресРезультата) Экспорт
	
	Ошибки = Неопределено;
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ошибки);
	
	ДанныеЗагрузки.Вставить("Номенклатура", НоваяТаблицаНоменклатуры());
	ДанныеЗагрузки.Вставить("ДокументыКПроведению", НоваяТаблицаДокументовКПроведению());
	
	ДанныеОрганизации = Неопределено;
	Организация = Неопределено;
	Если ДанныеЗагрузки.Свойство(ИмяРеквизитыОрганизации(), ДанныеОрганизации) Тогда
		Организация = ЗаписатьРеквизитыОрганизации(
			ДанныеОрганизации, Результат, ДанныеЗагрузки.Организация);
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	Иначе
		ДанныеЗагрузки.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ДанныеЗагрузки.Свойство(ИмяКонтрагенты()) Тогда
		НайтиСоздатьКонтрагентов(ДанныеЗагрузки.Контрагенты, Ошибки);
		ДлительныеОперации.СообщитьПрогресс( , ИмяКонтрагенты());
	КонецЕсли;
	
	ТаблицаТиповДокументов = ТаблицаСопоставления(ИмяТипыДокументов());
	
	Если ДанныеЗагрузки.Свойство(ИмяДокументыДвиженияДенег()) Тогда
		ЗаписатьДанные(ИмяДокументыДвиженияДенег(), ДанныеЗагрузки, ТаблицаТиповДокументов, Ошибки);
		ТекстПрогресса = ЗагруженныеОбъектыРаздела(ТаблицаТиповДокументов, ИмяДокументыДвиженияДенег());
		ДлительныеОперации.СообщитьПрогресс( , ТекстПрогресса);
	КонецЕсли;
	
	Если ДанныеЗагрузки.Свойство(ИмяВходящиеДокументы()) Тогда
		ЗаписатьДанные(ИмяВходящиеДокументы(), ДанныеЗагрузки, ТаблицаТиповДокументов, Ошибки);
		ТекстПрогресса = ЗагруженныеОбъектыРаздела(ТаблицаТиповДокументов, ИмяВходящиеДокументы());
		ДлительныеОперации.СообщитьПрогресс( , ТекстПрогресса);
	КонецЕсли;
	
	Если ДанныеЗагрузки.Свойство(ИмяИсходящиеДокументы()) Тогда
		ЗаписатьДанные(ИмяИсходящиеДокументы(), ДанныеЗагрузки, ТаблицаТиповДокументов, Ошибки);
		ТекстПрогресса = ЗагруженныеОбъектыРаздела(ТаблицаТиповДокументов, ИмяИсходящиеДокументы());
		ДлительныеОперации.СообщитьПрогресс( , ТекстПрогресса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗагрузки.ДокументыКПроведению) Тогда
		ПровестиДокументы(ДанныеЗагрузки.ДокументыКПроведению);
		ДлительныеОперации.СообщитьПрогресс( , ИмяОперацииПроведенияДокументов());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

#Область ЧтениеДанных

Функция ПрочитатьФайл(Свойства)
	
	Ошибки = Неопределено;
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Ошибки", Ошибки);
	РезультатВыполнения.Вставить("Организация", Неопределено);
	
	ДвоичныеДанные = Свойства.ХранилищеДанных.Получить();
	Если ДвоичныеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			РезультатВыполнения.Ошибки, "ИмяФайла", НСтр("ru = 'Не удалось прочитать файл'"), "");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Свойства.РасширениеФайла);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеАрхива = Новый ЧтениеZipФайла(ИмяВременногоФайла);
	
	ОбработатьДанныеАрхива(ЧтениеАрхива, РезультатВыполнения, Свойства.Организация);
	
	ЧтениеАрхива.Закрыть();
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ОбработатьДанныеАрхива(ЧтениеАрхива, РезультатВыполнения, Организация)
	
	ОписаниеФайлов = НовоеОписаниеЗагружаемыхФайлов();
	ЗаполнитьОписаниеИменамиФайлов(ОписаниеФайлов);
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
	ЧтениеАрхива.ИзвлечьВсе(ВременныйКаталог);
	
	ЗагружаемыеДанные = НоваяТаблицаЗагружаемыхДанных();
	
	НайденныеФайлы = НайтиФайлы(ВременныйКаталог, "*.csv");
	
	ДобавитьФайлыВОписание(НайденныеФайлы, ОписаниеФайлов);
	
	Если Не ПроверитьАрхив(ОписаниеФайлов) Тогда
		ТекстОшибки = НСтр("ru = 'Файл не может быть загружен'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(РезультатВыполнения.Ошибки, "ИмяФайла", ТекстОшибки, "");
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ОписаниеФайлов Цикл
		
		Если Строка.Файл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрочитанныеДанные = ПрочитатьДанныеИзФайла(Строка, РезультатВыполнения.Ошибки, ЗагружаемыеДанные, Организация);
		Если ПрочитанныеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		РезультатВыполнения.Вставить(Строка.ИмяФайла, ПрочитанныеДанные);
		
	КонецЦикла;
	
	РезультатВыполнения.Вставить("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	
КонецПроцедуры

Функция ПроверитьАрхив(ОписаниеФайлов)
	
	ПроверкаПройдена = Ложь;
	// Реквизиты организаций имеют разные заголовки для ИП и юр. лиц (внутри файла), в таблице с описанием файлов найдем
	// строку с нужными реквизитами, лишнее удалим. Если ни один файл с реквизитами организации не был найден,
	// то проверка не пройдена
	ОтборРеквизитыОрганизации = Новый Структура("ИмяФайла", ИмяРеквизитыОрганизации());
	СтрокиРеквизитовОрганизации = ОписаниеФайлов.НайтиСтроки(ОтборРеквизитыОрганизации);
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из СтрокиРеквизитовОрганизации Цикл
		Если Строка.Файл = Неопределено Тогда
			СтрокиКУдалению.Добавить(Строка);
		Иначе
			ПроверкаПройдена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПроверкаПройдена Тогда
		Возврат ПроверкаПройдена;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ОписаниеФайлов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого Строка Из ОписаниеФайлов Цикл
		Если Строка.Обязательный И Строка.Файл = Неопределено Тогда
			ПроверкаПройдена = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

Функция НоваяТаблицаЗагружаемыхДанных()

	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	Обработка = Метаданные.Обработки.ЗагрузкаДанныхИзДругойУчетнойСистемы;
	КолонкиТаблицы = Обработка.ТабличныеЧасти.ЗагружаемыеДанные.Реквизиты;
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл
	
		ЗагружаемыеДанные.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
	
	КонецЦикла;
	
	ЗагружаемыеДанные.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	
	Возврат ЗагружаемыеДанные;
	
КонецФункции

Функция ПрочитатьДанныеИзФайла(СтрокаОписания, Ошибки, ЗагружаемыеДанные, Организация)
	
	Если СтрокаОписания.ИмяФайла = ИмяРеквизитыОрганизации() Тогда
		
		ПрочитанныеДанные = ПрочитатьРеквизитыОрганизации(СтрокаОписания.Файл.ПолноеИмя, Ошибки);
		
		Если Не ИННОрганизацииСоответствуетЗагружаемымДанным(ПрочитанныеДанные, Организация) Тогда
			
			ТекстОшибки = НСтр("ru = 'ИНН организации в базе и файле различается.
				|Проверьте реквизиты организации или выберите другой файл'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки, "");
			Возврат Неопределено;
			
		КонецЕсли;
	Иначе
		ПрочитанныеДанные = ПрочитатьТаблицуДанных(СтрокаОписания.Файл.ПолноеИмя, СтрокаОписания.ИмяФайла, Ошибки);
		ЗаполнитьКоличествоОбъектов(СтрокаОписания.ИмяФайла, ПрочитанныеДанные, ЗагружаемыеДанные);
	КонецЕсли;
	
	Возврат ПрочитанныеДанные;
	
КонецФункции

Функция ПрочитатьТаблицуДанных(ПутьКФайлу, ИмяФайла, Ошибки)
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу);
	СодержимоеФайла = ЧтениеТекста.Прочитать();
	СоставДанных = НоваяТаблицаРеквизитов();
	ЗаполнитьСоответствияРеквизитов(ИмяФайла, СоставДанных);
	Если ИмяФайла = ИмяКонтрагенты() Тогда
		СтрокаШапкаТаблицы = ОпределитьНомераКолонокДанныхКонтрагентов(СоставДанных, СодержимоеФайла);
	Иначе
		СтрокаШапкаТаблицы = ОпределитьНомераКолонокДокументов(СоставДанных, СодержимоеФайла);
	КонецЕсли;
	Если СтрокаШапкаТаблицы = 0 Тогда
		ТекстОшибки = НСтр(СтрШаблон("ru = 'Неверный формат файла %1'", ПутьКФайлу));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ИмяФайла", ТекстОшибки, "");
	Иначе
		ТаблицаДанных = НоваяТаблицаДанных(СоставДанных);
		ЗаполнитьТаблицуДанных(
			ТаблицаДанных, СоставДанных, СодержимоеФайла, СтрокаШапкаТаблицы, ИмяФайла);
	КонецЕсли;
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗаполнитьКоличествоОбъектов(ИмяТаблицы, ТаблицаДанных, ЗагружаемыеДанные)
	
	ТаблицаТиповДокументов = ТаблицаСопоставления(ИмяТипыДокументов());
	
	Если ТаблицаДанных.Колонки.Найти("ТипДокумента") = Неопределено Тогда
		
		НовСтрока = ЗагружаемыеДанные.Добавить();
		НовСтрока.ИмяОбъекта           = ИмяТаблицы;
		НовСтрока.ПредставлениеОбъекта = ИмяТаблицы;
		НовСтрока.КоличествоОбъектов   = ТаблицаДанных.Количество();
		НовСтрока.ИмяРеквизитаФормы    = ИмяТаблицы;
		НовСтрока.Приоритет            = 1;
		
	Иначе
		
		ТаблицаДокументов = ТаблицаДанных.Скопировать( , "ТипДокумента, КоличествоОбъектов");
		ТаблицаДокументов.ЗаполнитьЗначения(1, "КоличествоОбъектов");
		ТаблицаДокументов.Свернуть("ТипДокумента", "КоличествоОбъектов");
		
		Для Каждого СтрокаДанных Из ТаблицаДокументов Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("РазделДанных, ТипДокумента", ИмяТаблицы, СтрокаДанных.ТипДокумента);
			НайденныеСтроки = ТаблицаТиповДокументов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НовСтрока = ЗагружаемыеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, НайденныеСтроки[0]);
				НовСтрока.КоличествоОбъектов = СтрокаДанных.КоличествоОбъектов;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗагружаемыеДанные.Сортировать("Приоритет");
	
КонецПроцедуры

Функция НоваяТаблицаРеквизитов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита1С",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024)));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизитаВФайле", 
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024)));
	ТаблицаРеквизитов.Колонки.Добавить("Значение");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Процедура ЗаполнитьСоответствияРеквизитов(ИмяФайла, ТаблицаРеквизитов)
	
	Если ИмяФайла = ИмяКонтрагенты() Тогда
		ЗаполнитьСоответствияРеквизитовКонтрагентов(ТаблицаРеквизитов);
	ИначеЕсли ИмяФайла = ИмяВходящиеДокументы() Или ИмяФайла = ИмяИсходящиеДокументы() Тогда
		ЗаполнитьСоответствияРеквизитовВходящихИсходящихДокументов(ТаблицаРеквизитов);
	ИначеЕсли ИмяФайла = ИмяДокументыДвиженияДенег() Тогда
		ЗаполнитьСоответствияРеквизитовДенежныхДокументов(ТаблицаРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьСоответствие(Таблица, ИмяРеквизита1С, ИмяРеквизитаВФайле = "")
	
	Строка = Таблица.Добавить();
	Строка.ИмяРеквизита1С = ИмяРеквизита1С;
	Строка.ИмяРеквизитаВФайле = ИмяРеквизитаВФайле;
	Возврат Строка;
	
КонецФункции

#КонецОбласти

#Область Организация

Функция ЗаписатьРеквизитыОрганизации(ПрочитанныеДанные, Результат, Организация)
	
	РеквизитыОрганизации = Новый Структура;
	Для Каждого Строка Из ПрочитанныеДанные Цикл
		РеквизитыОрганизации.Вставить(Строка.ИмяРеквизита1С, Строка.Значение);
	КонецЦикла;
	РеквизитыОрганизации.ИмяИП = РеквизитыОрганизации.Имя;
	РеквизитыОрганизации.ФамилияИП = РеквизитыОрганизации.Фамилия;
	РеквизитыОрганизации.ОтчествоИП = РеквизитыОрганизации.Отчество;
	
	РеквизитыОрганизации.НаименованиеПолное = УдалитьКавычки(РеквизитыОрганизации.НаименованиеПолное);
	РеквизитыОрганизации.НаименованиеСокращенное = УдалитьКавычки(РеквизитыОрганизации.НаименованиеСокращенное);
	
	ИсходныеСообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	ЮрЛицо = ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(РеквизитыОрганизации.ИНН);
	НачатьТранзакцию();
	Попытка
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		Если ЮрЛицо Тогда
			РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
		ОрганизацияОбъект.Заполнить(РеквизитыОрганизации);
		ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, РеквизитыОрганизации,
			"ИНН, КПП, КодОКВЭД, ОГРН, ИмяИП, ФамилияИП, ОтчествоИП, НаименованиеПолное,
			|НаименованиеСокращенное, ЮридическоеФизическоеЛицо");
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОГРНИП) Тогда
			ОрганизацияОбъект.ОГРН = РеквизитыОрганизации.ОГРНИП;
		КонецЕсли;
		Если Не ЮрЛицо Тогда
			ОрганизацияОбъект.НаименованиеПолное =
				ОрганизацииФормыКлиентСервер.ПолноеНаименованиеИндивидульногоПредпринимателя(
				РеквизитыОрганизации.Фамилия, РеквизитыОрганизации.Имя, РеквизитыОрганизации.Отчество);
			ОрганизацияОбъект.Наименование =
				ОрганизацииФормыКлиентСервер.НаименованиеИндивидульногоПредпринимателя(
				РеквизитыОрганизации.Фамилия, РеквизитыОрганизации.Имя, РеквизитыОрганизации.Отчество);
			ОрганизацияОбъект.НаименованиеСокращенное =
				ОрганизацииФормыКлиентСервер.СокращенноеНаименованиеИндивидульногоПредпринимателя(
				РеквизитыОрганизации.Фамилия, РеквизитыОрганизации.Имя, РеквизитыОрганизации.Отчество);
		Иначе
			ОрганизацияОбъект.Наименование = РеквизитыОрганизации.НаименованиеСокращенное;
		КонецЕсли;
		
		ЗаписатьКонтактныеДанныеОрганизации(ОрганизацияОбъект, РеквизитыОрганизации);
		
		// ОКВЭД
		Если ЗначениеЗаполнено(ОрганизацияОбъект.КодОКВЭД) Тогда
			Классификатор = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД");
			ОрганизацияОбъект.НаименованиеОКВЭД = Классификатор.Получить(ОрганизацияОбъект.КодОКВЭД);
		КонецЕсли;
		
		// Регистрация в налоговом органе
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.РегистрацияВНалоговомОргане) Тогда
			СоздатьРегистрациюВНалоговомОргане(ОрганизацияОбъект, РеквизитыОрганизации, ЮрЛицо);
		КонецЕсли;
		
		// ПФР
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.КодОрганаПФР) Тогда
			
			РеквизитыРегистрацииПФР = Новый Структура;
			Для Каждого СтрокаПФР Из РеквизитыОрганизации.РегистрацияВПФР Цикл
				РеквизитыРегистрацииПФР.Вставить(СтрокаПФР.ИмяРеквизита1С, СтрокаПФР.Значение);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, РеквизитыРегистрацииПФР);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИсторияРегистрацийВОрганеПФР");
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписейИсторияПФР = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
			НаборЗаписейИсторияПФР.Отбор.Организация.Установить(Организация);
			НаборЗаписейИсторияПФР.Прочитать();
			ЗаписьИсторияПФР = НаборЗаписейИсторияПФР.Добавить();
			ЗаписьИсторияПФР.Организация = Организация;
			ЗаписьИсторияПФР.РегистрационныйНомерПФР = РеквизитыРегистрацииПФР.РегистрационныйНомерПФР;
			ЗаписьИсторияПФР.Период = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.ДатаОтсчетаПериодическихСведений();
			НаборЗаписейИсторияПФР.Записать();
			
		КонецЕсли;
		
		// ФСС
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.КодПодчиненностиФСС) Тогда
			РеквизитыРегистрацииФСС = Новый Структура;
			Для Каждого СтрокаФСС Из РеквизитыОрганизации.РегистрацияВФССОрганизации Цикл
				РеквизитыРегистрацииФСС.Вставить(СтрокаФСС.ИмяРеквизита1С, СтрокаФСС.Значение);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, РеквизитыРегистрацииФСС);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтветственныеЛицаОрганизаций");
		ЭлементБлокировки.УстановитьЗначение("СтруктурнаяЕдиница", Организация);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Руководитель
		НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация);
		НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		НаборЗаписей.Прочитать();
		Если Не ЗначениеЗаполнено(НаборЗаписей) Тогда
			РеквизитыРуководителя = Новый Структура;
			Для Каждого СтрокаРуководитель Из РеквизитыОрганизации.РуководительОрганизации Цикл
				РеквизитыРуководителя.Вставить(СтрокаРуководитель.ИмяРеквизита1С, СтрокаРуководитель.Значение);
			КонецЦикла;
			Запись = НаборЗаписей.Добавить();
			Запись.СтруктурнаяЕдиница = Организация;
			Запись.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
			Запись.Период = Дата("19800101");
			Запись.ФизическоеЛицо = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(РеквизитыРуководителя);
			Запись.Должность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(РеквизитыРуководителя.Должность);
			НаборЗаписей.Записать();
		КонецЕсли;
	
		// Бухгалтер
		НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация);
		НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		НаборЗаписей.Прочитать();
		Если Не ЗначениеЗаполнено(НаборЗаписей) Тогда
			РеквизитыБухгалтера = Новый Структура;
			Для Каждого СтрокаБухгалтер Из РеквизитыОрганизации.Бухгалтер Цикл
				РеквизитыБухгалтера.Вставить(СтрокаБухгалтер.ИмяРеквизита1С, СтрокаБухгалтер.Значение);
			КонецЦикла;
			Запись = НаборЗаписей.Добавить();
			Запись.СтруктурнаяЕдиница = Организация;
			Запись.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
			Запись.Период = Дата("19800101");
			Запись.ФизическоеЛицо = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(РеквизитыБухгалтера);
			Запись.Должность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(НСтр("ru = 'Главный бухгалтер'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ОрганизацияОбъект.Записать();
	Исключение
		МассивСообщенийОбОшибках = Новый Массив;
		МассивСообщенийОбОшибках.Добавить(НСтр("ru = 'Не удалось загрузить организацию'"));
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			МассивСообщенийОбОшибках.Добавить(Сообщение.Текст);
		КонецЦикла;
		ТекстОшибки = СтрСоединить(МассивСообщенийОбОшибках, Символы.ПС);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, "", ТекстОшибки, "");
		ЗаписьЖурналаРегистрации(
			ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, , ОписаниеОшибки());
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Для Каждого Сообщение Из ИсходныеСообщенияПользователю Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	РеквизитыБанковскихСчетов = Новый Массив;
	Для Каждого Реквизит Из РеквизитыОрганизации Цикл
		Если СтрНайти(Реквизит.Ключ, "РасчетныйСчет") <> 0 Тогда
			РеквизитыБанковскихСчетов.Добавить(Реквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(РеквизитыБанковскихСчетов) Тогда
		ОсновнойБанковскийСчет = СоздатьБанковскиеСчета(Организация, РеквизитыБанковскихСчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		ОрганизацияОбъект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
		ОрганизацияОбъект.Записать();
	КонецЕсли;
	
	ПроверитьИзменитьСистемуНалогообложения(Организация);
	
	Возврат Организация;
	
КонецФункции

Процедура СоздатьРегистрациюВНалоговомОргане(ОрганизацияОбъект, РеквизитыОрганизации, ЮрЛицо)
	
	ПрочитанныеДанныеРегистрации = РеквизитыОрганизации.РегистрацияВНалоговомОргане;
	РеквизитыРегистрацииИФНС = Новый Структура;
	Для Каждого СтрокаИФНС Из ПрочитанныеДанныеРегистрации Цикл
		РеквизитыРегистрацииИФНС.Вставить(СтрокаИФНС.ИмяРеквизита1С, СтрокаИФНС.Значение);
	КонецЦикла;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
	РегистрацияВНалоговомОргане.Владелец = ОрганизацияОбъект.Ссылка;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
		РеквизитыРегистрацииИФНС.Код);
		
	Если Не ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
		ПлатежныеРеквизитыФНСПредставление =
			ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыНалоговогоОргана);
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, РеквизитыНалоговогоОргана);
		РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
		КодРегионаРегистрации = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(
			РегистрацияВНалоговомОргане.Код);
		РегистрацияВНалоговомОргане.КодРегиона = КодРегионаРегистрации;
	Иначе
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, РеквизитыРегистрацииИФНС);
		РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыРегистрацииИФНС.Наименование;
	КонецЕсли;
	
	Если ЮрЛицо Тогда
		РегистрацияВНалоговомОргане.КПП = РеквизитыОрганизации.КПП;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане.Записать();
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Адрес) И ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
		РеквизитыНалоговогоОргана.Ссылка,
		РеквизитыНалоговогоОргана.Адрес,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
		РеквизитыНалоговогоОргана.Ссылка,
		РеквизитыНалоговогоОргана.Адрес,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
		РеквизитыНалоговогоОргана.Ссылка,
		РеквизитыНалоговогоОргана.Адрес,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	ОрганизацияОбъект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	ОрганизацияОбъект.НаименованиеНалоговогоОргана = РегистрацияВНалоговомОргане.НаименованиеИФНС;
	ОрганизацияОбъект.КодНалоговогоОргана = РегистрацияВНалоговомОргане.Код;
	
	// История регистраций в налоговом органе
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИсторияРегистрацийВНалоговомОргане");
	ЭлементБлокировки.УстановитьЗначение("СтруктурнаяЕдиница", ОрганизацияОбъект.Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ОрганизацияОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	СтрокаНабораЗаписей = НаборЗаписей.Добавить();
	СтрокаНабораЗаписей.Период = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
	СтрокаНабораЗаписей.СтруктурнаяЕдиница = ОрганизацияОбъект.Ссылка;
	СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПрочитатьРеквизитыОрганизации(ИмяФайла, Ошибки)
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	СодержимоеФайла = ЧтениеТекста.Прочитать();
	ПрочитанныеРеквизиты = СформироватьТаблицуРеквизитовОрганизации(СодержимоеФайла);
	
	Если Не ЗначениеЗаполнено(ПрочитанныеРеквизиты) Тогда
		ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Неверный формат файла %1'"), ИмяФайла);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ИмяФайла", ТекстСообщения, "");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПрочитанныеРеквизиты;
	
КонецФункции

Функция ИННОрганизацииСоответствуетЗагружаемымДанным(ПрочитанныеДанные, Организация)
	
	Если ПрочитанныеДанные = Неопределено Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаИНН = ПрочитанныеДанные.Найти("ИНН", "ИмяРеквизита1С");
	
	Если СтрокаИНН <> Неопределено Тогда
		
		ИННВыбраннойОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Организация, "ИНН");
			
		Если ЗначениеЗаполнено(ИННВыбраннойОрганизации)
			И ИННВыбраннойОрганизации <> СтрокаИНН.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьКонтактныеДанныеОрганизации(Организация, ДанныеОрганизации)
	
	Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ПрочитанныйАдрес = ДанныеОрганизации.ЮридическийАдресОрганизации;
	Иначе
		ПрочитанныйАдрес = ДанныеОрганизации.АдресФизЛица;
	КонецЕсли;
	
	ДанныеАдреса = Новый Структура;
	Для Каждого Элемент Из ПрочитанныйАдрес Цикл
		ДанныеАдреса.Вставить(Элемент.ИмяРеквизита1С, Элемент.Значение);
	КонецЦикла;
	
	// Приведем структуру к стандартному виду, для корректной обработки адреса,
	// см. РаботаСАдресами СтруктураАдресаВСтруктуруJSON
	ОбработатьАдрес(ДанныеАдреса);
	
	ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ДанныеАдреса, "");
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Организация, ПредставлениеАдреса,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.ПочтовыйАдрес) Тогда
		ПочтовыйАдрес = ДанныеОрганизации.ПочтовыйАдрес;
	Иначе
		ПочтовыйАдрес = ПредставлениеАдреса;
	КонецЕсли;
		
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Организация, ПочтовыйАдрес,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Организация, ПочтовыйАдрес,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		
	Если ЗначениеЗаполнено(ДанныеОрганизации.ТелефонОрганизации) Тогда
	
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Организация, ДанныеОрганизации.ТелефонОрганизации,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуРеквизитовОрганизации(Текст)
	
	ТаблицаРеквизитовОрганизации = НоваяТаблицаРеквизитов();
	ЗаполнитьСоответствияРеквизитовОрганизации(ТаблицаРеквизитовОрганизации);
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для Сч = 1 По КоличествоСтрок Цикл
		// Файл состоит из трех колонок, в первой колонке хранится имя реквизита, если реквизит содержит
		// вложенные реквизиты, то их имена хранятся во второй колонке и заполняться начинают в той же строке,
		// в которой хранится имя основного реквизита. Третья колонка содержит значение реквизита
		Строка = ПрочитатьСтрокуРеквизитовОрганизации(Текст, Сч);
		Если ЗначениеЗаполнено(Строка.ИмяОсновногоРеквизита) Тогда
			Реквизит = ТаблицаРеквизитовОрганизации.Найти(Строка.ИмяОсновногоРеквизита, "ИмяРеквизитаВФайле");
			Если Реквизит = Неопределено Тогда
				Продолжить;
			// В текстовом блоке с информацией о расчетных счетах вложенные реквизиты повторяются, т.к. счетов
			// может быть несколько, поэтому загрузку счетов отрабатываем по отдельному алгоритму
			ИначеЕсли Реквизит.ИмяРеквизита1С = ИмяРеквизитаДляРасчетныхСчетов() Тогда
				// Данный реквизит используется в служебных целях,
				// для отслеживания начала события загрузки расчетных счетов, поэтому сразу удаляется из таблицы реквизитов
				ТаблицаРеквизитовОрганизации.Удалить(Реквизит);
				Сч = ПрочитатьРасчетныеСчетаОрганизации(Сч, Текст, ТаблицаРеквизитовОрганизации);
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.ИмяВложенногоРеквизита) Тогда
				// Строка содержит значение основного реквизита
				Реквизит.Значение = Строка.Значение;
			Иначе
				// С этой строки начинается чтение вложенных реквизитов
				Если ТипЗнч(Реквизит.Значение) <> Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначениеВНайденнойСтроке(
					Реквизит.Значение, Строка.ИмяВложенногоРеквизита, "ИмяРеквизитаВФайле", Строка.Значение);
			КонецЕсли;
		ИначеЕсли Реквизит = Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(Строка.ИмяВложенногоРеквизита) Тогда
			// Продолжается чтение вложенных реквизитов
			Если ТипЗнч(Реквизит.Значение) <> Тип("ТаблицаЗначений") Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначениеВНайденнойСтроке(
				Реквизит.Значение, Строка.ИмяВложенногоРеквизита, "ИмяРеквизитаВФайле", Строка.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаРеквизитовОрганизации;
	
КонецФункции

Процедура ЗаполнитьСоответствияРеквизитовОрганизации(ТаблицаРеквизитов)
	
	ДобавитьСоответствие(ТаблицаРеквизитов, "НаименованиеПолное", "полное название организации");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НаименованиеСокращенное", "краткое название организации");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ИНН", "инн");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КПП", "кпп");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ОГРН", "огрн");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ОГРНИП", "огрнип");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КодОКВЭД", "основной оквэд");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Имя", "имя");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ИмяИП");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Фамилия", "фамилия");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ФамилияИП");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Отчество", "отчество");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ОтчествоИП");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ТелефонОрганизации", "телефон");
	// Служебный реквизит, необходимый для процедуры Справочники.Организации.СоздатьОрганизацию
	ДобавитьСоответствие(ТаблицаРеквизитов, "ОписаниеОшибки");
	// Данное свойство не читается из файла, а заполняется в процессе создания нового объекта
	ДобавитьСоответствие(ТаблицаРеквизитов, "ЮридическоеФизическоеЛицо");
	СтрокаАдресОрганизации = ДобавитьСоответствие(ТаблицаРеквизитов, "ЮридическийАдресОрганизации", "юридический адрес");
	СтрокаАдресОрганизации.Значение = СоответствияВложенныхРеквизитовАдреса();
	СтрокаАдресИП = ДобавитьСоответствие(ТаблицаРеквизитов, "АдресФизЛица", "адрес прописки");
	СтрокаАдресИП.Значение = СоответствияВложенныхРеквизитовАдреса();
	ДобавитьСоответствие(ТаблицаРеквизитов, "ПочтовыйАдрес", "адрес для документов");
	СтрокаРуководитель = ДобавитьСоответствие(ТаблицаРеквизитов, "РуководительОрганизации", "руководитель");
	СтрокаРуководитель.Значение = СоответствияВложенныхРеквизитовОтветственногоЛица();
	СтрокаБухгалтер = ДобавитьСоответствие(ТаблицаРеквизитов, "Бухгалтер", "бухгалтер");
	СтрокаБухгалтер.Значение = СоответствияВложенныхРеквизитовОтветственногоЛица();
	СтрокаПФР = ДобавитьСоответствие(ТаблицаРеквизитов, "РегистрацияВПФР", "реквизиты в пфр");
	СтрокаПФР.Значение = СоответствияВложенныхРеквизитовПФР();
	СтрокаФСС = ДобавитьСоответствие(ТаблицаРеквизитов, "РегистрацияВФССОрганизации", "реквизиты в фсс");
	СтрокаФСС.Значение = СоответствияВложенныхРеквизитовФСС();
	СтрокаИФНС = ДобавитьСоответствие(ТаблицаРеквизитов, "РегистрацияВНалоговомОргане", "ифнс по месту регистрации");
	СтрокаИФНС.Значение = СоответствияВложенныхРеквизитовИФНС();
	ДобавитьСоответствие(
		ТаблицаРеквизитов, ИмяРеквизитаДляРасчетныхСчетов(), ОбозначениеРеквизитаДляРасчетныхСчетовВФайле());
	
КонецПроцедуры

Функция ПрочитатьСтрокуРеквизитовОрганизации(Текст, НомерСтроки)
	
	Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
	Подстроки = СтрРазделить(Строка, ";", Истина);
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("ИмяОсновногоРеквизита", НРег(СокрЛП(Подстроки[0])));
	ДанныеСтроки.Вставить("ИмяВложенногоРеквизита", НРег(СокрЛП(Подстроки[1])));
	ДанныеСтроки.Вставить("Значение", СокрЛП(Подстроки[2]));
	Возврат ДанныеСтроки;
	
КонецФункции

Функция СоответствияВложенныхРеквизитовАдреса()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "Регион", "регион");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НаселенныйПункт", "населенный пункт");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Улица", "улица");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Дом", "дом");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Корпус", "корпус");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Квартира", "квартира");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Помещение", "помещение");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Офис", "офис");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Индекс", "индекс");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ОКТМО", "октмо");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ТипыПомещений()
	
	ТипыПомещений = Новый Структура;
	ТипыПомещений.Вставить("Квартира");
	ТипыПомещений.Вставить("Помещение");
	ТипыПомещений.Вставить("Офис");
	Возврат ТипыПомещений;
	
КонецФункции

Процедура ОбработатьАдрес(ДанныеАдреса)
	
	Помещения = ТипыПомещений();
	ЗаполнитьЗначенияСвойств(Помещения, ДанныеАдреса);
	ДанныеАдреса.Вставить("Помещения", Новый Массив);
	Для каждого Элемент Из Помещения Цикл
		ДанныеАдреса.Удалить(Элемент.Ключ);
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Помещение = Новый Структура;
			Помещение.Вставить("Тип", Элемент.Ключ);
			Помещение.Вставить("Номер", Элемент.Значение);
			ДанныеАдреса.Помещения.Добавить(Помещение);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция СоответствияВложенныхРеквизитовОтветственногоЛица()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "Должность", "должность");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Фамилия", "фамилия");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Имя", "имя");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Отчество", "отчество");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция СоответствияВложенныхРеквизитовПФР()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "РегистрационныйНомерПФР", "рег. номер работодателя в пфр");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НомерСоглашения", "номер соглашения с пфр");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ДатаСоглашения", "дата соглашения");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КодОрганаПФР", "код пфр");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НаименованиеТерриториальногоОрганаПФР", "наименование пфр");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ИПРегистрационныйНомерПФР", "регномер ип");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СНИЛС", "снилс");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция СоответствияВложенныхРеквизитовФСС()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "РегистрационныйНомерФСС", "рег. номер в фсс");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КодПодчиненностиФСС", "код фсс");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Ставка", "ставка на травм");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция СоответствияВложенныхРеквизитовИФНС()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "Код", "код");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Наименование", "наименование");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Процедура ПроверитьИзменитьСистемуНалогообложения(Организация, СуммаРасходУСН = 0, СуммаПатент = 0)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСистемыНалогообложенияСрезПоследних.Период КАК Период,
		|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
		|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН КАК ПрименяетсяУСН
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(, Организация = &Организация) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Прочитать();
		Модифицированность = Ложь;
		Если Выборка.СистемаНалогообложения <> Перечисления.СистемыНалогообложения.Упрощенная Тогда
			МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			МенеджерЗаписи.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
			Модифицированность = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаРасходУСН) И Не МенеджерЗаписи.ПрименяетсяУСНДоходыМинусРасходы Тогда
			МенеджерЗаписи.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			Модифицированность = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаПатент) И Не МенеджерЗаписи.ПрименяетсяУСНПатент Тогда
			МенеджерЗаписи.ПрименяетсяУСНПатент = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		Если Модифицированность Тогда
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БанковскиеСчета

Функция СоздатьБанковскиеСчета(Владелец, МассивСчетов)
	
	ОсновнойБанковскийСчет = Неопределено;
	
	Для Каждого ПараметрыСчета Из МассивСчетов Цикл
		
		Если Не ЗначениеЗаполнено(ПараметрыСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			РеквизитыСчета = СформироватьРеквизитыСчета(ПараметрыСчета);
		Иначе
			РеквизитыСчета = ПрочитатьРеквизитыРасчетногоСчетаИзТаблицы(ПараметрыСчета[0]);
		КонецЕсли;
		ОбработатьРеквизитыСчета(РеквизитыСчета);
		РеквизитыСчета.Владелец = Владелец;
		
		СозданныйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СозданныйСчет.Заполнить(РеквизитыСчета);
		ЗаполнитьЗначенияСвойств(СозданныйСчет, РеквизитыСчета);
		СозданныйСчет.Записать();
		
		Если ОсновнойБанковскийСчет = Неопределено Тогда
			ОсновнойБанковскийСчет = СозданныйСчет.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсновнойБанковскийСчет;
	
КонецФункции

Функция ПрочитатьРасчетныеСчетаОрганизации(НомерНачальнойСтроки, Текст, ТаблицаРеквизитов)
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	ПорядковыйНомерСчета = 1;
	Для НомерСтроки = НомерНачальнойСтроки По КоличествоСтрок Цикл
		Строка = ПрочитатьСтрокуРеквизитовОрганизации(Текст, НомерСтроки);
		Если ЗначениеЗаполнено(Строка.ИмяОсновногоРеквизита)
			И Строка.ИмяОсновногоРеквизита <> ОбозначениеРеквизитаДляРасчетныхСчетовВФайле() Тогда
			// Закончился текстовый блок с информацией о расчетных счетах, далее чтение файла продолжится
			// по основному алгоритму
			Возврат НомерСтроки - 1;
		КонецЕсли;
		
		Если Строка.ИмяВложенногоРеквизита = РазделительРасчетныхСчетов() Тогда
			// С этой строки начинается информация о новом счете
			Реквизит = ТаблицаРеквизитов.Добавить();
			Реквизит.ИмяРеквизита1С = СтрШаблон("%1%2", ИмяРеквизитаДляРасчетныхСчетов(), Формат(ПорядковыйНомерСчета, "ЧГ="));
			Реквизит.Значение = СоответствияРеквизитовРасчетныхСчетов();
			ЗаполнитьЗначениеВНайденнойСтроке(
				Реквизит.Значение, Строка.ИмяВложенногоРеквизита, "ИмяРеквизитаВФайле", Строка.Значение);
			ПорядковыйНомерСчета = ПорядковыйНомерСчета + 1;
		Иначе
			Если ТипЗнч(Реквизит.Значение) = Тип("ТаблицаЗначений") Тогда
				ЗаполнитьЗначениеВНайденнойСтроке(
					Реквизит.Значение, Строка.ИмяВложенногоРеквизита, "ИмяРеквизитаВФайле", Строка.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерСтроки;
	
КонецФункции

Функция СоответствияРеквизитовРасчетныхСчетов()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "НомерСчета", "р/с");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НаименованиеБанка", "наименование банка");
	ДобавитьСоответствие(ТаблицаРеквизитов, "БИК", "бик банка");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КоррСчетБанка", "корсчет банка");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КоррСчетБанка", "корр. счет банка");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция СформироватьРеквизитыСчета(ПараметрыСчета)
	
	РеквизитыСчета = НовыеРеквизитыБанковскогоСчета();
	Для Каждого Строка Из ПараметрыСчета Цикл
		Если РеквизитыСчета.Свойство(Строка.ИмяРеквизита1С)
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			РеквизитыСчета[Строка.ИмяРеквизита1С] = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыСчета;
	
КонецФункции

Функция ПрочитатьРеквизитыРасчетногоСчетаИзТаблицы(ПараметрСчета)
	
	РеквизитыСчета = НовыеРеквизитыБанковскогоСчета();
	ПрочитанныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ПараметрСчета);
	ЗаполнитьЗначенияСвойств(РеквизитыСчета, ПрочитанныеДанные);
	
	Возврат РеквизитыСчета;
	
КонецФункции

Функция НовыеРеквизитыБанковскогоСчета()
	
	РеквизитыБанковскогоСчета = Новый Структура;
	// возможные типы: СправочникСсылка.Организации или СправочникСсылка.Контрагенты
	РеквизитыБанковскогоСчета.Вставить("Владелец", Справочники.Организации.ПустаяСсылка()); 
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", "");
	РеквизитыБанковскогоСчета.Вставить("НаименованиеБанка", "");
	РеквизитыБанковскогоСчета.Вставить("БИК", "");
	РеквизитыБанковскогоСчета.Вставить("КоррСчетБанка", "");
	РеквизитыБанковскогоСчета.Вставить("ВалютаДенежныхСредств", Справочники.Валюты.ПустаяСсылка());
	РеквизитыБанковскогоСчета.Вставить("Валютный", Ложь);
	
	Возврат РеквизитыБанковскогоСчета;
	
КонецФункции

Процедура ОбработатьРеквизитыСчета(РеквизитыСчета)
	
	РеквизитыСчета.НомерСчета = СтрЗаменить(РеквизитыСчета.НомерСчета, " ", "");
	РеквизитыСчета.НомерСчета = СтрЗаменить(РеквизитыСчета.НомерСчета, Символы.НПП, "");
	РеквизитыСчета.КоррСчетБанка = СтрЗаменить(РеквизитыСчета.КоррСчетБанка, " ", "");
	РеквизитыСчета.КоррСчетБанка = СтрЗаменить(РеквизитыСчета.КоррСчетБанка, Символы.НПП, "");
	РеквизитыСчета.БИК = БанковскиеПравила.ИсправитьБИК(РеквизитыСчета.БИК);
	РеквизитыСчета.НаименованиеБанка = УдалитьКавычки(РеквизитыСчета.НаименованиеБанка);
	
	// Для российского счета можно определить валюту по номеру счета.
	Если БанковскиеПравила.СтрокаСоответствуетФорматуБанковскогоСчета(РеквизитыСчета.НомерСчета)
		И Не БанковскиеПравила.ЭтоРублевыйСчет(РеквизитыСчета.НомерСчета) Тогда
		КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(РеквизитыСчета.НомерСчета);
		РеквизитыСчета.ВалютаДенежныхСредств = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
		РеквизитыСчета.Валютный = Истина;
	Иначе
		РеквизитыСчета.ВалютаДенежныхСредств
			= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		РеквизитыСчета.Валютный = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Контрагенты

Процедура НайтиСоздатьКонтрагентов(ДанныеКонтрагентов, Ошибки)
	
	ТекстОшибки = НСтр("ru = 'Не удалось записать контрагента %1 по причине:
		|%2'");
	
	ТаблицаПоиска = Новый  ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаПоиска.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12)));
	ТаблицаПоиска.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
	ТаблицаПоиска.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Сч = 1;
	Для Каждого ПрочитанныеДанные Из ДанныеКонтрагентов Цикл
		Если ЗначениеЗаполнено(ПрочитанныеДанные.ИНН) Тогда
			СтрокаПоиска = ТаблицаПоиска.Добавить();
			СтрокаПоиска.ПорядковыйНомер = Сч;
			СтрокаПоиска.ИНН = ПрочитанныеДанные.ИНН;
			СтрокаПоиска.КПП = ПрочитанныеДанные.КПП;
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТаблицаПоиска) Тогда
		НайтиКонтрагентов(ТаблицаПоиска);
	КонецЕсли;
	
	РасчетныеСчета = Новый Массив;
	Для Каждого Колонка Из ДанныеКонтрагентов.Колонки Цикл
		Если СтрНайти(Колонка.Имя, ИмяРеквизитаДляРасчетныхСчетов()) Тогда
			РасчетныеСчета.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПрочитанныеДанные Из ДанныеКонтрагентов Цикл
		
		Если ЗначениеЗаполнено(ПрочитанныеДанные.ИНН) Тогда
			ПараметрыПоиска = Новый Структура("ИНН", ПрочитанныеДанные.ИНН);
			НайденныеСтроки = ТаблицаПоиска.НайтиСтроки(ПараметрыПоиска);
			Если ЗначениеЗаполнено(ПрочитанныеДанные.КПП) Тогда
				КПП = ПрочитанныеДанные.КПП;
			Иначе
				КПП = "";
			КонецЕсли;
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если Строка.КПП = КПП Тогда
					ПрочитанныеДанные.Ссылка = Строка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПрочитанныеДанные.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения = ДанныеЗаполненияКонтрагента(ПрочитанныеДанные);
		
		ДанныеРасчетныхСчетов = Новый Массив;
		Для Каждого ИмяКолонки Из РасчетныеСчета Цикл
			ДанныеРасчетныхСчетов.Добавить(ПрочитанныеДанные[ИмяКолонки]);
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьКонтрагента(ДанныеЗаполнения);
			
			ПрочитанныеДанные.Ссылка = НовыйКонтрагент;
			
			ОсновнойБанковскийСчет = СоздатьБанковскиеСчета(НовыйКонтрагент, ДанныеРасчетныхСчетов);
			
			Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", НовыйКонтрагент);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				КонтрагентОбъект = НовыйКонтрагент.ПолучитьОбъект();
				КонтрагентОбъект.ДополнительныеСвойства.Очистить();
				КонтрагентОбъект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
				
				КонтрагентОбъект.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПрочитанныеДанные.Адрес) Тогда
				
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, ПрочитанныеДанные.Адрес,
					Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
					
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, ПрочитанныеДанные.Адрес,
					Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
			
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, ПрочитанныеДанные.Адрес,
					Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПрочитанныеДанные.Телефон) Тогда
			
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, ПрочитанныеДанные.Телефон,
					Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПрочитанныеДанные.EMail) Тогда
				
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, ПрочитанныеДанные.EMail,
					Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ТекстСообщения = СтрШаблон(
				ТекстОшибки, ДанныеЗаполнения.Наименование,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, "", ТекстСообщения, "");
			
			ТекстСообщения = СтрШаблон(
				ТекстОшибки, ДанныеЗаполнения.Наименование,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Справочники.Контрагенты, , ТекстСообщения);
				
			ОтменитьТранзакцию();
				
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьНомераКолонокДанныхКонтрагентов(СоставДанных, Текст)
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	КоличествоРасчетныхСчетов = 1;
	СтрокаШапкаТаблицы = 0;
	Для Сч = 1 По КоличествоСтрок Цикл
		Если СтрокаШапкаТаблицы <> 0 Тогда
			Прервать;
		КонецЕсли;
		Строка = СтрПолучитьСтроку(Текст, Сч);
		Подстроки = СтрРазделить(Строка, ";", Истина);
		Для Колонка = 0 По Подстроки.ВГраница() Цикл
			ПрочитанноеЗначение = НРег(СокрЛП(Подстроки[Колонка]));
			НайденныйРеквизит = СоставДанных.Найти(ПрочитанноеЗначение, "ИмяРеквизитаВФайле");
			Если НайденныйРеквизит = Неопределено Или Не ЗначениеЗаполнено(ПрочитанноеЗначение) Тогда
				Если Колонка = 0 Тогда
					// В строке не содержится описания реквизитов
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				СтрокаШапкаТаблицы = Сч;
			КонецЕсли;
			
			Если ТипЗнч(НайденныйРеквизит.Значение) <> Тип("ТаблицаЗначений") Тогда
				// Не содержит вложенных реквизитов
				НайденныйРеквизит.Значение = Колонка;
			Иначе
				// Необходимо прочитать вложенные реквизиты
				ВложеннаяСтрока = СтрПолучитьСтроку(Текст, Сч + 1);
				ВложенныеПодстроки = СтрРазделить(ВложеннаяСтрока, ";", Истина);
				ВложеннаяКолонка = Колонка;
				Если НайденныйРеквизит.ИмяРеквизита1С = ИмяРеквизитаДляРасчетныхСчетов() Тогда
					// Расчетные счета записываются в файле подряд, их может быть несколько на одного контрагента
					// поэтому в структуре данных заведем отдельные реквизиты на каждый расчетный счет
					НайденныйРеквизит = ДобавитьСоответствие(
						СоставДанных, СтрШаблон("%1%2", ИмяРеквизитаДляРасчетныхСчетов(), Формат(КоличествоРасчетныхСчетов, "ЧГ=")));
					НайденныйРеквизит.Значение = СоответствияРеквизитовРасчетныхСчетов();
					КоличествоРасчетныхСчетов = КоличествоРасчетныхСчетов + 1;
				КонецЕсли;
				НачалосьЗаполнениеРеквизитов = Ложь;
				РазделительРасчетныхСчетов = РазделительРасчетныхСчетов();
				Пока ВложеннаяКолонка < ВложенныеПодстроки.ВГраница() Цикл
					ПрочитанноеЗначение = НРег(СокрЛП(ВложенныеПодстроки[ВложеннаяКолонка]));
					Если Не ЗначениеЗаполнено(ПрочитанноеЗначение)
						// В случае с расчетными счетами нужно контролировать,
						// что не началось чтение реквизитов следующего счета
						Или (ПрочитанноеЗначение = РазделительРасчетныхСчетов И НачалосьЗаполнениеРеквизитов) Тогда
						Прервать;
					Иначе
						НачалосьЗаполнениеРеквизитов = Истина;
						ВложенныйРеквизит = НайденныйРеквизит.Значение.Найти(ПрочитанноеЗначение, "ИмяРеквизитаВФайле");
						Если ВложенныйРеквизит <> Неопределено Тогда
							ВложенныйРеквизит.Значение = ВложеннаяКолонка;
						КонецЕсли;
					КонецЕсли;
					ВложеннаяКолонка = ВложеннаяКолонка + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Расчетные счета выгружаются с порядковым номером ("РасчетныйСчет1" и т.д.), запись с именем "РасчетныйСчет"
	// без порядкового номера удаляем, т.к. она содержит исключительно служебную информацию
	// и далее использоваться не будет
	СтрокаРасчетногоСчета = СоставДанных.Найти(ИмяРеквизитаДляРасчетныхСчетов(), "ИмяРеквизита1С");
	Если СтрокаРасчетногоСчета <> Неопределено Тогда
		СоставДанных.Удалить(СтрокаРасчетногоСчета);
	КонецЕсли;
	
	Возврат СтрокаШапкаТаблицы + 1;
	
КонецФункции

Процедура ЗаполнитьСоответствияРеквизитовКонтрагентов(ТаблицаРеквизитов)
	
	ДобавитьСоответствие(ТаблицаРеквизитов, "Наименование", "название контрагента");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ИНН", "инн");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КПП", "кпп");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ОГРН", "огрн");
	ДобавитьСоответствие(ТаблицаРеквизитов, "КодПоОКПО", "окпо");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Адрес", "адрес контрагента");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Комментарий", "комментарий");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Телефон", "телефон");
	ДобавитьСоответствие(ТаблицаРеквизитов, "EMail", "электронная почта");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Ссылка"); // служебный реквизит, заполняется при загрузке контрагентов
	СтрокаКонтактноеЛицо = ДобавитьСоответствие(ТаблицаРеквизитов, "КонтактноеЛицо", "контактное лицо");
	СтрокаКонтактноеЛицо.Значение = СоответствияВложенныхРеквизитовКонтактногоЛица();
	СтрокаРасчетныйСчет = ДобавитьСоответствие(ТаблицаРеквизитов, ИмяРеквизитаДляРасчетныхСчетов(), "расчетный счет");
	СтрокаРасчетныйСчет.Значение = СоответствияРеквизитовРасчетныхСчетов();
	
КонецПроцедуры

Функция СоответствияВложенныхРеквизитовКонтактногоЛица()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "Должность", "должность");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Наименование", "фио");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Процедура НайтиКонтрагентов(ТаблицаПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоиска.ИНН КАК ИНН,
	|	ТаблицаПоиска.КПП КАК КПП,
	|	ТаблицаПоиска.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ВТ_ДанныеИзФайла
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеИзФайла.ИНН КАК ИНН,
	|	ВТ_ДанныеИзФайла.КПП КАК КПП,
	|	ВТ_ДанныеИзФайла.ПорядковыйНомер КАК ПорядковыйНомер,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ДанныеИзФайла КАК ВТ_ДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_ДанныеИзФайла.ИНН = Контрагенты.ИНН
	|			И ВТ_ДанныеИзФайла.КПП = Контрагенты.КПП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого СтрокаПоиска Из ТаблицаПоиска Цикл
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтрокаПоиска.ПорядковыйНомер, "ПорядковыйНомер") Тогда
			СтрокаПоиска.Ссылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗаполненияКонтрагента(СтрокаДанных)
	
	ДанныеЗаполнения = Новый Структура;
	
	// Основная информация о контрагенте
	ДанныеЗаполнения.Вставить(
		"Наименование", Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(СтрокаДанных.Наименование));
	
	ДанныеЗаполнения.Вставить("НаименованиеПолное", УдалитьКавычки(СтрокаДанных.Наименование));
	ДанныеЗаполнения.Вставить("ИНН", СтрокаДанных.ИНН);
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ДанныеЗаполнения.ИНН) Тогда
		ДанныеЗаполнения.Вставить("КПП", СтрокаДанных.КПП);
		КодПричиныПостановкиНаУчет = ИдентификационныеНомераНалогоплательщиков.КодПричиныПостановкиНаУчет(
			ДанныеЗаполнения.КПП);
		Если КодПричиныПостановкиНаУчет <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ОбособленноеПодразделение",
				Не ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетОрганизацииВЦелом(
				КодПричиныПостановкиНаУчет));
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ДанныеЗаполнения.ИНН) Тогда
		ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Иначе
		ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("РегистрационныйНомер", СтрокаДанных.ОГРН);
	ДанныеЗаполнения.Вставить("КодПоОКПО", СтрокаДанных.КодПоОКПО);
	ДанныеЗаполнения.Вставить("Комментарий", СтрокаДанных.Комментарий);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция РеквизитыКонтрагентовОбязательныеКЗаполнению()
	
	ОбязательныеРеквизиты = Новый Массив;
	ОбязательныеРеквизиты.Добавить("Наименование");
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область Документы

Процедура ЗаписатьДанные(РазделДанных, ЗагружаемыеДанные, ТаблицаТиповДокументов, Ошибки)
	
	ТаблицаДанных = ЗагружаемыеДанные[РазделДанных];
	
	ТаблицаДанных.Сортировать("ТипДокумента, Дата, Номер");
	
	Если РазделДанных = ИмяДокументыДвиженияДенег() Тогда
		СуммаРасходУСН = ТаблицаДанных.Итог("РасходыУСН");
		СуммаПатент = ТаблицаДанных.Итог("СуммаПатент");
		Если ЗначениеЗаполнено(СуммаПатент) Или ЗначениеЗаполнено(СуммаРасходУСН) Тогда
			ПроверитьИзменитьСистемуНалогообложения(ЗагружаемыеДанные.Организация, СуммаРасходУСН, СуммаПатент);
		КонецЕсли;
		СоздатьДокументыДвиженияДенег(ТаблицаДанных, ЗагружаемыеДанные, Ошибки);
	Иначе
		НайтиСоздатьНоменклатуру(ТаблицаДанных, ЗагружаемыеДанные.Номенклатура, Ошибки);
		
		СтрокиТиповДокументов = ТаблицаТиповДокументов.НайтиСтроки(Новый Структура("РазделДанных", РазделДанных));
		ПараметрыДокумента = НовыйПараметрыДокумента();
		Для Каждого СтрокаТипаДокумента Из СтрокиТиповДокументов Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыДокумента, СтрокаТипаДокумента);
			СоздатьВходящиеИсходящиеДокументы(ТаблицаДанных, ЗагружаемыеДанные, Ошибки, ПараметрыДокумента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагруженныеОбъектыРаздела(ЗагружаемыеДанные, ИмяРаздела)
	
	МассивОбъектов = Новый Массив;
	ОбъектыРаздела = ЗагружаемыеДанные.НайтиСтроки(Новый Структура("РазделДанных", ИмяРаздела));
	Для Каждого ОбъектЗагрузки Из ОбъектыРаздела Цикл
		МассивОбъектов.Добавить(ОбъектЗагрузки.ИмяРеквизитаФормы);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивОбъектов,",");
	
КонецФункции

Функция ОпределитьНомераКолонокДокументов(СоставДанных, Текст)
	
	// Структура файла предполагает размещение вложенных реквизитов в одной строке с основными реквизитами,
	// владельцы вложенных реквизитов определяются в строке выше и будут прочитаны в первую очередь
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	СтрокаШапкаТаблицы = 0;
	// Имена основных и вложенных реквизитов могут совпадать, поэтому необходимо запомнить найденные вложенные реквизиты
	// чтобы сразу пропускать их при обходе основных
	КолонкиВложенныхРеквизитов = Новый Массив;
	Для Сч = 1 По КоличествоСтрок Цикл
		Если СтрокаШапкаТаблицы <> 0 Тогда
			Прервать;
		КонецЕсли;
		Строка = СтрПолучитьСтроку(Текст, Сч);
		Подстроки = СтрРазделить(Строка, ";", Истина);
		Для Колонка = 0 По Подстроки.ВГраница() Цикл
			Если КолонкиВложенныхРеквизитов.Найти(Колонка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПрочитанноеЗначение = НРег(СокрЛП(Подстроки[Колонка]));
			НайденныйРеквизит = СоставДанных.Найти(ПрочитанноеЗначение, "ИмяРеквизитаВФайле");
			Если НайденныйРеквизит = Неопределено Или Не ЗначениеЗаполнено(ПрочитанноеЗначение) Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(НайденныйРеквизит.Значение) = Тип("ТаблицаЗначений") Тогда
				СтрокаВложенныхРеквизитов = СтрПолучитьСтроку(Текст, Сч + 1);
				ПодстрокиВложенныхРеквизитов = СтрРазделить(СтрокаВложенныхРеквизитов, ";", Истина);
				Для НомерВложенногоРеквизита = Колонка По Подстроки.ВГраница() Цикл
					ИмяРеквизита = НРег(СокрЛП(ПодстрокиВложенныхРеквизитов[НомерВложенногоРеквизита]));
					ВложенныйРеквизит = НайденныйРеквизит.Значение.Найти(ИмяРеквизита, "ИмяРеквизитаВФайле");
					Если ВложенныйРеквизит <> Неопределено Тогда
						ВложенныйРеквизит.Значение = НомерВложенногоРеквизита;
						КолонкиВложенныхРеквизитов.Добавить(НомерВложенногоРеквизита);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НайденныйРеквизит.Значение = Колонка;
				СтрокаШапкаТаблицы = Сч;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СтрокаШапкаТаблицы;
	
КонецФункции

Процедура ЗаполнитьСоответствияРеквизитовВходящихИсходящихДокументов(ТаблицаРеквизитов)
	
	ДобавитьСоответствие(ТаблицаРеквизитов, "Дата", "дата документа");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ТипДокумента", "тип документа");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Номер", "номер документа");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Контрагент", "наименование контрагента");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Сумма", "сумма документа");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Комментарий", "комментарий");
	СтрокаТабличнаяЧасть = ДобавитьСоответствие(ТаблицаРеквизитов, "ТабличнаяЧасть", "фактурная часть");
	СтрокаТабличнаяЧасть.Значение = СоответствияТабличнойЧастиДокументов();
	СтрокаРасчетныйСчетОрганизации = ДобавитьСоответствие(ТаблицаРеквизитов, "РасчетныйСчет", "расчетный счет");
	СтрокаРасчетныйСчетОрганизации.Значение = СоответствияРеквизитовРасчетныхСчетов();
	СтрокаРасчетныйСчетОрганизации = ДобавитьСоответствие(
		ТаблицаРеквизитов, "РасчетныйСчетКонтрагента", "расчетный счет контрагента");
	СтрокаРасчетныйСчетОрганизации.Значение = СоответствияРеквизитовРасчетныхСчетов();
	
КонецПроцедуры

Процедура ЗаполнитьСоответствияРеквизитовДенежныхДокументов(ТаблицаРеквизитов)
	
	ДобавитьСоответствие(ТаблицаРеквизитов, "Дата", "дата");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ТипДокумента", "тип документа");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НомерВходящегоДокумента", "№ документа");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Номер");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Контрагент", "контрагент");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ВидОперации", "тип операции");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ВидДенежныхСредств", "тип денег (банк/касса/прочее)");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НомерРасчетногоСчета", "р/с");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НаименованиеБанка", "наименование банка");
	ДобавитьСоответствие(ТаблицаРеквизитов, "НазначениеПлатежа", "описание");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаПоступления", "поступило");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаСписания", "списано");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаУслуг", "комиссия");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ДоходыУСН", "учитывается в налоге усн (доход)");
	ДобавитьСоответствие(ТаблицаРеквизитов, "РасходыУСН", "учитывается в налоге усн (расход)");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаПатент", "учитывается в патенте");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаДокумента"); // заполняется при загрузке документа
	СтрокаРасчетныйСчетОрганизации = ДобавитьСоответствие(
		ТаблицаРеквизитов, "РасчетныйСчетКонтрагента", "расчетный счет контрагента");
	СтрокаРасчетныйСчетОрганизации.Значение = СоответствияРеквизитовРасчетныхСчетов();
	
КонецПроцедуры

Процедура СоздатьДокументыДвиженияДенег(ТаблицаДанных, ЗагружаемыеДанные, Ошибки)
	
	ВидыОперацийДвиженияДенег = ТаблицаСопоставления("ВидыОперацийДвиженияДенег");
	ОпределитьСчетаУчетаДвиженияДенег(ВидыОперацийДвиженияДенег);
	
	ВалютаРегл = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Организация = ЗагружаемыеДанные.Организация;
	
	Для Каждого ПрочитанныеДанные Из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(ПрочитанныеДанные.СуммаПоступления) Тогда
			ПрочитанныеДанные.СуммаДокумента = ПрочитанныеДанные.СуммаПоступления;
		ИначеЕсли ЗначениеЗаполнено(ПрочитанныеДанные.СуммаСписания) Тогда
			ПрочитанныеДанные.СуммаДокумента = ПрочитанныеДанные.СуммаСписания;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПрочитанныеДанные.СуммаДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = ОпределитьИмяДокументаДвиженияДенег(ПрочитанныеДанные);
		Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОперации = ВидОперацииДвиженияДенег(ПрочитанныеДанные, ИмяДокумента, ВидыОперацийДвиженияДенег);
		
		Если Не ЗначениеЗаполнено(ПараметрыОперации.ВидОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрочитанныеДанные.Дата = ДатаИзСтроки(ПрочитанныеДанные.Дата);
		
		ПроверитьУстановитьЗаписьУчетнойПолитики(Организация, ПрочитанныеДанные.Дата);
		
		НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
		РеквизитыДокумента = НовыеРеквизитыДокумента();
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ПрочитанныеДанные);
		РеквизитыДокумента.Графа5_УСН = ПрочитанныеДанные.ДоходыУСН;
		РеквизитыДокумента.Графа7_УСН = ПрочитанныеДанные.РасходыУСН;
		
		Если ЗначениеЗаполнено(ПрочитанныеДанные.НомерРасчетногоСчета) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.НомерСчета = &НомерСчета";
			ПрочитанныеДанные.НомерРасчетногоСчета = СтрЗаменить(ПрочитанныеДанные.НомерРасчетногоСчета, " ", "");
			ПрочитанныеДанные.НомерРасчетногоСчета = СтрЗаменить(ПрочитанныеДанные.НомерРасчетногоСчета, Символы.НПП, "");
			Запрос.УстановитьПараметр("НомерСчета", ПрочитанныеДанные.НомерРасчетногоСчета);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РеквизитыДокумента.СчетОрганизации = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		НайденнаяСтрокаКонтрагента = ЗагружаемыеДанные.Контрагенты.Найти(
			РеквизитыДокумента.Контрагент, "Наименование");
		
		Если НайденнаяСтрокаКонтрагента <> Неопределено Тогда
			РеквизитыДокумента.Контрагент = НайденнаяСтрокаКонтрагента.Ссылка;
		КонецЕсли;
		
		РеквизитыДокумента.Организация = Организация;
		РеквизитыДокумента.ВидОперации = Перечисления[ПараметрыОперации.ИмяПеречисления][ПараметрыОперации.ВидОперации];
		
		НовыйДокумент.Дата = РеквизитыДокумента.Дата;
		
		НовыйДокумент.Заполнить(РеквизитыДокумента);
		
		// Принудительно заполняем реквизиты, которые не заполняются в обработке заполнения
		ЗаполнитьЗначенияСвойств(НовыйДокумент, РеквизитыДокумента, "Графа5_УСН, Графа7_УСН");
		
		СтруктураКурсаВзаиморасчетов =
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(НовыйДокумент.ВалютаДокумента, ПрочитанныеДанные.Дата);
		
		// Для поступления на расчетный счет не заполняются в обработке заполнения
		ЭтоДокументПоступленияНаРС = Ложь;
		Если ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
			НовыйДокумент.НазначениеПлатежа = РеквизитыДокумента.НазначениеПлатежа;
			НовыйДокумент.НомерВходящегоДокумента = РеквизитыДокумента.НомерВходящегоДокумента;
			НовыйДокумент.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаВзаиморасчетов.Курс;
			НовыйДокумент.СуммаУслуг = РеквизитыДокумента.СуммаУслуг;
			
			ЭтоДокументПоступленияНаРС = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОперации.Счет) Тогда
			НовыйДокумент.СчетУчетаРасчетовСКонтрагентом = ПараметрыОперации.Счет;
		КонецЕсли;
		
		ДополнитьРеквизитыДокументаДвиженияДенег(НовыйДокумент, ПрочитанныеДанные);
		
		Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
			РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(НовыйДокумент);
			Если Не ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБП.ДоговорКонтрагентаИзОбъекта(НовыйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйДокумент.РасшифровкаПлатежа) Тогда
			
			СтрокаРасшифровкаПлатежа = НовыйДокумент.РасшифровкаПлатежа[0];
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровкаПлатежа, НовыйДокумент);
			СтрокаРасшифровкаПлатежа.СуммаПлатежа                   = ПрочитанныеДанные.СуммаДокумента;
			СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов            = ПрочитанныеДанные.СуммаДокумента;
			СтрокаРасшифровкаПлатежа.СпособПогашенияЗадолженности   = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов             = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаРасшифровкаПлатежа.КратностьВзаиморасчетов        = СтруктураКурсаВзаиморасчетов.Кратность;
			Если ЭтоДокументПоступленияНаРС Тогда
				СтрокаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаВзаиморасчетов.Курс;
				Если НовыйДокумент.ВидОперации = 
					Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
					// При данном виде операции счета учета расчетов с контрагентами различаются в табличной части и шапке документа,
					// счет в табличной части необходимо перезаполнить
					СтрокаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			Если НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма Тогда
				Если ПрочитанныеДанные.ВидОперации = "Выплата процентов по кредиту" Тогда
					СтрокаРасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств =
						УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию("УплатаПроцентов");
				Иначе
					СтрокаРасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств =
						УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию("ПогашениеДолга");
				КонецЕсли;
			КонецЕсли;
			
			Если НовыйДокумент.ВидОперации
				= Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
				
				СтрокаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов;
				
			КонецЕсли;
		КонецЕсли;
		
		// В некоторых видах документов сумма очищается в обработке заполнения
		НовыйДокумент.СуммаДокумента = ПрочитанныеДанные.СуммаДокумента;
		НовыйДокумент.Комментарий = ПрочитанныеДанные.ВидОперации;
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(НовыйДокумент, РежимЗаписиДокумента.Проведение);
		
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			СтрокаДокументКПроведению = ЗагружаемыеДанные.ДокументыКПроведению.Добавить();
			СтрокаДокументКПроведению.Дата = НовыйДокумент.Дата;
		Иначе
			СтрокаДокументКПроведению = Неопределено;
		КонецЕсли;
		
		НовыйДокумент.ОбменДанными.Загрузка = Истина;
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если СтрокаДокументКПроведению <> Неопределено Тогда
			СтрокаДокументКПроведению.Ссылка = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыДокумента()
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("РазделДанных");
	ПараметрыДокумента.Вставить("ТипДокумента");
	ПараметрыДокумента.Вставить("ИмяОбъекта");
	ПараметрыДокумента.Вставить("ИмяТабЧасти");
	ПараметрыДокумента.Вставить("ВидДоговора");
	ПараметрыДокумента.Вставить("ЕстьСтавкаНДС");
	ПараметрыДокумента.Вставить("ЕстьСтатусДокумента");
	ПараметрыДокумента.Вставить("ЕстьВидОперации");
	ПараметрыДокумента.Вставить("ЕстьДанныеВходящегоДокумента");
	ПараметрыДокумента.Вставить("ЕстьКонтрагент");
	ПараметрыДокумента.Вставить("ЕстьДоговорКонтрагента");
	ПараметрыДокумента.Вставить("ЕстьФизЛицо");
	ПараметрыДокумента.Вставить("ЕстьСклад");
	ПараметрыДокумента.Вставить("ЕстьПодразделение");
	ПараметрыДокумента.Вставить("ЭтоСчетФактура");
	ПараметрыДокумента.Вставить("ЭтоОтчетОРозничныхПродажах");
	ПараметрыДокумента.Вставить("ЗагружатьНомерДокумента");
	ПараметрыДокумента.Вставить("ЗаполнитьСчетаУчета");
	ПараметрыДокумента.Вставить("ВедетсяУчетВУСН");
	ПараметрыДокумента.Вставить("ДокументБезНДС");
	
	Возврат ПараметрыДокумента;
	
КонецФункции

Процедура СоздатьВходящиеИсходящиеДокументы(ТаблицаДанных, ЗагружаемыеДанные, Ошибки, ПараметрыДокумента)
	
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ТипДокумента", ПараметрыДокумента.ТипДокумента));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОперацийДокументов          = ВидыОперацийДокументов();
	ВидыСтатусовДокументов          = СтатусыДокументов();
	СтавкиНДС                       = СтавкиНДС();
	
	ДополнитьПараметрыВходящихИсходящихДокументов(ПараметрыДокумента);
	
	Организация = ЗагружаемыеДанные.Организация;
	ИмяДокумента = ПараметрыДокумента.ИмяОбъекта;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Строка.Дата = ДатаИзСтроки(Строка.Дата);
		
		ПроверитьУстановитьЗаписьУчетнойПолитики(Организация, Строка.Дата);
		
		Если ПараметрыДокумента.ЕстьКонтрагент И ЗначениеЗаполнено(Строка.Контрагент) Тогда
			НайденнаяСтрокаКонтрагента = ЗагружаемыеДанные.Контрагенты.Найти(Строка.Контрагент, "Наименование");
			Если НайденнаяСтрокаКонтрагента <> Неопределено Тогда
				Строка.Контрагент = НайденнаяСтрокаКонтрагента.Ссылка;
			КонецЕсли;
		КонецЕсли;
			
		РеквизитыДокумента = НовыеРеквизитыДокумента();
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Строка);
		РеквизитыДокумента.Организация = Организация;
		
		НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
		
		Если ПараметрыДокумента.ЭтоОтчетОРозничныхПродажах Тогда
			НовыйДокумент.Склад = НайтиСоздатьСкладНТТ();
		ИначеЕсли ПараметрыДокумента.ЕстьСклад Тогда
			НовыйДокумент.Склад = НайтиСоздатьОсновнойСклад();
		КонецЕсли;
		
		НовыйДокумент.Заполнить(РеквизитыДокумента);
		ЗаполнитьЗначенияСвойств(НовыйДокумент, Строка);
		НовыйДокумент.СуммаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.Сумма);
		
		ВидОперации = СтрШаблон("%1_%2", ПараметрыДокумента.РазделДанных, ПараметрыДокумента.ТипДокумента);
		Если ПараметрыДокумента.ЕстьВидОперации Тогда
			НовыйДокумент.ВидОперации = ВидыОперацийДокументов.Получить(НРег(ВидОперации));
		КонецЕсли;
		
		Если ПараметрыДокумента.ЕстьДанныеВходящегоДокумента Тогда
			НовыйДокумент.НомерВходящегоДокумента = РеквизитыДокумента.Номер;
			НовыйДокумент.ДатаВходящегоДокумента  = РеквизитыДокумента.Дата;
		КонецЕсли;
		
		Если Не ПараметрыДокумента.ЗагружатьНомерДокумента Тогда
			НовыйДокумент.Номер = "";
		КонецЕсли;
		
		Если ПараметрыДокумента.ЕстьДоговорКонтрагента Тогда
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
				НовыйДокумент.ДоговорКонтрагента, НовыйДокумент.Контрагент, НовыйДокумент.Организация,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыДокумента.ВидДоговора));
		КонецЕсли;
		
		Если ПараметрыДокумента.ЕстьФизЛицо Тогда
			РеквизитыДокумента.ФизЛицо = НайтиСоздатьСлужебноеФизЛицо();
		КонецЕсли;
		
		Если ПараметрыДокумента.ЭтоСчетФактура Тогда
			ЗаполнитьРеквизитыСФ(НовыйДокумент, СтавкиНДС, Строка);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыДокумента.ИмяТабЧасти) Тогда
			ЗаполнитьТабличнуюЧасть(
				НовыйДокумент, ПараметрыДокумента, СтавкиНДС, Строка.ТабличнаяЧасть, ЗагружаемыеДанные.Номенклатура);
		КонецЕсли;
		
		Если ПараметрыДокумента.ЗаполнитьСчетаУчета Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ТабличнаяЧасть", ПараметрыДокумента.ИмяТабЧасти);
			СчетаУчетаВДокументах.ЗаполнитьТаблицу(
				Документы[ИмяДокумента], РеквизитыДокумента, НовыйДокумент[ПараметрыДокумента.ИмяТабЧасти], Отбор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
			РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(НовыйДокумент);
			Если Не ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБП.ДоговорКонтрагентаИзОбъекта(НовыйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыДокумента.ДокументБезНДС Тогда
			НовыйДокумент.НДСНеВыделять = Истина;
		КонецЕсли;
		
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			СтрокаДокументКПроведению = ЗагружаемыеДанные.ДокументыКПроведению.Добавить();
			СтрокаДокументКПроведению.Дата = НовыйДокумент.Дата;
		Иначе
			СтрокаДокументКПроведению = Неопределено;
		КонецЕсли;
		
		Если ПараметрыДокумента.ЕстьПодразделение Тогда
			Склад = ?(ПараметрыДокумента.ЕстьСклад, НовыйДокумент.Склад, Справочники.Склады.ПустаяСсылка());
			ПодразделениеПоУмолчанию = ОбщегоНазначенияБП.ПолучитьПодразделение(Организация, Склад);
			Если НЕ ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
				ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
					"ОсновноеПодразделениеОрганизации");
			КонецЕсли;
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(
				ПодразделениеПоУмолчанию, Организация) Тогда
				НовыйДокумент.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		НовыйДокумент.ОбменДанными.Загрузка = Истина;
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если СтрокаДокументКПроведению <> Неопределено Тогда
			СтрокаДокументКПроведению.Ссылка = НовыйДокумент.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствияТабличнойЧастиДокументов()
	
	ТаблицаРеквизитов = НоваяТаблицаРеквизитов();
	ДобавитьСоответствие(ТаблицаРеквизитов, "Номенклатура",     "наименование");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Количество",       "количество");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ЕдиницаИзмерения", "ед. измерения");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Цена",             "цена за ед. товара");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаСНДС",        "сумма с ндс");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СуммаНДС",         "ндс");
	ДобавитьСоответствие(ТаблицаРеквизитов, "СтавкаНДС",        "ставка ндс");
	ДобавитьСоответствие(ТаблицаРеквизитов, "ПроцентСкидки",    "процент скидки");
	ДобавитьСоответствие(ТаблицаРеквизитов, "Сумма",            "сумма");
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ОпределитьИмяДокументаДвиженияДенег(ПрочитанныеДанные)
	
	Если НРег(ПрочитанныеДанные.ВидДенежныхСредств) = ТипДенегБанк() Тогда
		Если ЗначениеЗаполнено(ПрочитанныеДанные.СуммаПоступления) Тогда
			Возврат "ПоступлениеНаРасчетныйСчет";
		Иначе
			Возврат "СписаниеСРасчетногоСчета";
		КонецЕсли;
	ИначеЕсли НРег(ПрочитанныеДанные.ВидДенежныхСредств) = ТипДенегКасса() Тогда
		Если ЗначениеЗаполнено(ПрочитанныеДанные.СуммаПоступления) Тогда
			Возврат "ПриходныйКассовыйОрдер";
		Иначе
			Возврат "РасходныйКассовыйОрдер";
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

Функция ВидОперацииДвиженияДенег(ДанныеДокумента, ИмяДокумента, ТаблицаВидовОпераций)
	
	ПараметрыОперации = НовыйПараметрыОперацииДвиженияДенег();
	
	СтруктураПоиска = Новый Структура("ИмяДокумента, ИсходныйВидОперации", ИмяДокумента, ДанныеДокумента.ВидОперации);
	СтрокиВидОперации = ТаблицаВидовОпераций.НайтиСтроки(СтруктураПоиска);
	Если СтрокиВидОперации.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, СтрокиВидОперации[0]);
	КонецЕсли;
	
	Возврат ПараметрыОперации;
	
КонецФункции

Процедура ПроверитьУстановитьЗаписьУчетнойПолитики(Организация, ДатаУчетнойПолитики)
	
	Если УчетнаяПолитика.Существует(Организация, ДатаУчетнойПолитики) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУчета.СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(
		"УчетнаяПолитика",Организация, ТекущаяДатаСеанса(), ДатаУчетнойПолитики);
	
	НастройкиУчета.СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(
		"НастройкиСистемыНалогообложения",Организация, ТекущаяДатаСеанса(), ДатаУчетнойПолитики);
	
КонецПроцедуры

Функция НовыеРеквизитыДокумента()
	
	РеквизитыДокумента = Новый Структура;
	
	РеквизитыДокумента.Вставить("Контрагент");
	РеквизитыДокумента.Вставить("ДоговорКонтрагента");
	РеквизитыДокумента.Вставить("Комментарий");
	РеквизитыДокумента.Вставить("Дата");
	РеквизитыДокумента.Вставить("СтруктурнаяЕдиница");
	РеквизитыДокумента.Вставить("ФизЛицо");
	РеквизитыДокумента.Вставить("Номер");
	РеквизитыДокумента.Вставить("Организация");
	РеквизитыДокумента.Вставить("НазначениеПлатежа");
	РеквизитыДокумента.Вставить("НомерВходящегоДокумента");
	РеквизитыДокумента.Вставить("Графа5_УСН");
	РеквизитыДокумента.Вставить("Графа7_УСН");
	РеквизитыДокумента.Вставить("СуммаДокумента");
	РеквизитыДокумента.Вставить("СуммаУслуг");
	РеквизитыДокумента.Вставить("ВидОперации");
	РеквизитыДокумента.Вставить("СчетОрганизации");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Процедура ДополнитьРеквизитыДокументаДвиженияДенег(ДокументОбъект, ДанныеФайла)
	
	ВидыОперацийПрочийДоход  = МассивВидыОперацийПрочийДоход();
	ВидыОперацийПрочийРасход = МассивВидыОперацийПрочийРасход();
	ВидыОперацийНалог = ВидыОперацийУплатаНалога();
	
	Если ВидыОперацийПрочийДоход.Найти(ДокументОбъект.ВидОперации) <> Неопределено Тогда
	
		ДокументОбъект.СубконтоКт1 = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
	
	ИначеЕсли ВидыОперацийПрочийРасход.Найти(ДокументОбъект.ВидОперации) <> Неопределено Тогда
		
		ДокументОбъект.СубконтоДт1 = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
	
	ИначеЕсли ВидыОперацийНалог.Найти(ДокументОбъект.ВидОперации) <> Неопределено Тогда
		
		ДокументОбъект.Налог = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы");
		Если ДанныеФайла.ВидОперации = ИмяОперацииУплатыПенейШтрафовПоНалогам() Тогда
			ДокументОбъект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
		Иначе
			ДокументОбъект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийДокументов()
	
	ВидыОпераций = Новый Соответствие;
	ВидыОпераций.Вставить("входящие_документы_акт", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
	ВидыОпераций.Вставить("входящие_документы_накладная", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	ВидыОпераций.Вставить(
		"входящие_документы_авансовый отчет", Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее);
	ВидыОпераций.Вставить("исходящие_документы_акт", Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
	ВидыОпераций.Вставить("исходящие_документы_накладная", Перечисления.ВидыОперацийРеализацияТоваров.Товары);
	ВидыОпераций.Вставить("исходящие_документы_счёт-фактура", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ВидыОпераций.Вставить(
		"исходящие_документы_отчет о рознице", Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	
	Возврат ВидыОпераций;
	
КонецФункции

Функция СтатусыДокументов()
	
	Статусы = Новый Соответствие;
	Статусы.Вставить("Ждёт оплаты", Перечисления.СтатусОплатыСчета.НеОплачен);
	Статусы.Вставить("Частично оплачен", Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	Статусы.Вставить("Оплачен", Перечисления.СтатусОплатыСчета.Оплачен);
	Статусы.Вставить("Отменён", Перечисления.СтатусОплатыСчета.Отменен);
	Статусы.Вставить("Подписана", Перечисления.СтатусыДокументовРеализации.Подписан);
	Статусы.Вставить("Не подписана", Перечисления.СтатусыДокументовРеализации.НеПодписан);
	
	Возврат Статусы;
	
КонецФункции

Функция СтавкиНДС()
	
	Ставки = Новый Соответствие;
	Ставки.Вставить("Без НДС", Перечисления.СтавкиНДС.БезНДС);
	Ставки.Вставить("НДС 0%", Перечисления.СтавкиНДС.НДС0);
	Ставки.Вставить("НДС 10%", Перечисления.СтавкиНДС.НДС10);
	Ставки.Вставить("НДС 18%", Перечисления.СтавкиНДС.НДС18);
	Ставки.Вставить("НДС 20%", Перечисления.СтавкиНДС.НДС20);
	Ставки.Вставить("", Перечисления.СтавкиНДС.БезНДС);
	
	Возврат Ставки;
	
КонецФункции

Процедура ДополнитьПараметрыВходящихИсходящихДокументов(ПараметрыДокумента)
	
	ДокументыАвтонумерации = МассивДокументовАвтонумерации();
	
	ИмяДокумента = ПараметрыДокумента.ИмяОбъекта;
	МетаданныеДокумента = Метаданные.Документы[ИмяДокумента];
	
	ПараметрыДокумента.ЕстьСтатусДокумента = ПараметрыДокумента.РазделДанных = ИмяИсходящиеДокументы();
	ПараметрыДокумента.ЕстьВидОперации = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента);
	ПараметрыДокумента.ЕстьДанныеВходящегоДокумента = ОбщегоНазначения.ЕстьРеквизитОбъекта(
		"НомерВходящегоДокумента", МетаданныеДокумента);
	ПараметрыДокумента.ЕстьКонтрагент = ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокумента);
	ПараметрыДокумента.ЕстьДоговорКонтрагента = ОбщегоНазначения.ЕстьРеквизитОбъекта(
		"ДоговорКонтрагента", МетаданныеДокумента);
	ПараметрыДокумента.ЕстьФизЛицо = ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента);
	ПараметрыДокумента.ЭтоСчетФактура = ИмяДокумента = ИмяДокументаСчетФактура();
	ПараметрыДокумента.ЭтоОтчетОРозничныхПродажах = ИмяДокумента = ИмяДокументаОтчетОРозничныхПродажах();
	ПараметрыДокумента.ИмяТабЧасти = ИмяТабличнойЧасти(ПараметрыДокумента.ТипДокумента);
	ПараметрыДокумента.ЕстьСтавкаНДС = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента(
		"СтавкаНДС", МетаданныеДокумента, ПараметрыДокумента.ИмяТабЧасти);
	ПараметрыДокумента.ВидДоговора = ВидДоговораСКонтрагентом(ИмяДокумента);
	ПараметрыДокумента.ЗагружатьНомерДокумента = (ДокументыАвтонумерации.Найти(ИмяДокумента) = Неопределено);
	ПараметрыДокумента.ЕстьСклад = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокумента);
	ПараметрыДокумента.ЕстьПодразделение = ОбщегоНазначения.ЕстьРеквизитОбъекта(
		"ПодразделениеОрганизации", МетаданныеДокумента);
	ПараметрыДокумента.ЗаполнитьСчетаУчета = Булево(ПараметрыДокумента.ЗаполнитьСчетаУчета);
	ПараметрыДокумента.ВедетсяУчетВУСН = ИмяДокумента = "ПоступлениеТоваровУслуг";
	ПараметрыДокумента.ДокументБезНДС = ИмяДокумента = "ПоступлениеТоваровУслуг";
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСФ(СчетФактура, СтавкиНДС, ДанныеСФ)
	
	ДанныеСФ.Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСФ.Сумма);
	СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	СчетФактура.ДокументОснование = НайтиСоздатьДокументРеализации(ДанныеСФ);
	СчетФактура.Сумма = ДанныеСФ.Сумма;
	
	НовСтрока = СчетФактура.ДокументыОснования.Добавить();
	НовСтрока.ДокументОснование = СчетФактура.ДокументОснование;
	
	Если Не ПолучитьФункциональнуюОпцию("УплачиватьНДСспецРежимы") Тогда
		Константы.УплачиватьНДСспецРежимы.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьСлужебноеФизЛицо()
	
	Наименование = "Служебный";
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ФизЛицо = Выборка.Ссылка;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		
		ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицоОбъект.Заполнить(Неопределено);
		
		ФизЛицоОбъект.Наименование = Наименование;
		ФизЛицоОбъект.Записать();
		
		ФизЛицо = ФизЛицоОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

Функция НайтиСоздатьСкладНТТ()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование = &Наименование
	|	И Склады.ТипСклада = &ТипСклада";
	
	Запрос.УстановитьПараметр("Наименование", "Служебный");
	Запрос.УстановитьПараметр("ТипСклада", Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	СкладНТТ = Справочники.Склады.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СкладНТТ = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладНТТ) Тогда
		СкладОбъект = Справочники.Склады.СоздатьЭлемент();
		СкладОбъект.Наименование = "Служебный";
		СкладОбъект.ТипСклада    = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
		СкладОбъект.Записать();
		
		СкладНТТ = СкладОбъект.Ссылка;
	КонецЕсли;
	
	Возврат СкладНТТ;
	
КонецФункции

Функция НайтиСоздатьОсновнойСклад()
	
	Кол_ВоСкладов = Справочники.Склады.КоличествоСкладов();
	Если Кол_ВоСкладов = 0 Тогда
		НовыйСклад = Справочники.Склады.СоздатьЭлемент();
		НовыйСклад.Наименование = НСтр("ru = 'Основной склад'", ОбщегоНазначения.КодОсновногоЯзыка());
		НовыйСклад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
		НовыйСклад.Записать();
		Возврат НовыйСклад.Ссылка;
	Иначе
		Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧасть(
	НовыйДокумент, ПараметрыДокумента, СтавкиНДС, ДанныеТабличнойЧасти, ТаблицаНоменклатуры)
	
	ВключенУчетНДС = Ложь;
	Для Каждого Строка Из ДанныеТабличнойЧасти Цикл
		НоваяСтрока = НовыйДокумент[ПараметрыДокумента.ИмяТабЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
			НоваяСтрока.Сумма = Строка.СуммаСНДС;
		КонецЕсли;
		Если ДанныеТабличнойЧасти.Колонки.Найти("Номенклатура") <> Неопределено Тогда
			НайденнаяНоменклатура = ТаблицаНоменклатуры.Найти(Строка.Номенклатура, "НаименованиеНоменклатуры");
			Если НайденнаяНоменклатура <> Неопределено Тогда
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура.Ссылка;
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
					НовыйДокумент.Организация, НоваяСтрока.Номенклатура);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаУчета);
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыДокумента.ЕстьСтавкаНДС Тогда
			НоваяСтрока.СтавкаНДС = СтавкиНДС.Получить(Строка.СтавкаНДС);
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И Не НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Если Не ВключенУчетНДС Тогда
					МетаданныеДокумента = НовыйДокумент.Метаданные();
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", МетаданныеДокумента) Тогда
						НовыйДокумент.ДокументБезНДС = Ложь;
					ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСНеВыделять", МетаданныеДокумента) Тогда
						НовыйДокумент.НДСНеВыделять = Ложь;
					КонецЕсли;
					НовыйДокумент.СуммаВключаетНДС = Истина;
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокумента) Тогда
						НовыйДокумент.НДСВключенВСтоимость = Истина;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(
						НоваяСтрока, НовыйДокумент, ПараметрыДокумента.ИмяТабЧасти, НовыйДокумент.Метаданные());
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) Тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(
						НоваяСтрока, НовыйДокумент.СуммаВключаетНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыДокумента.ВедетсяУчетВУСН Тогда
			НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыОперацииДвиженияДенег()
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ВидОперации");
	ПараметрыОперации.Вставить("ИмяПеречисления");
	ПараметрыОперации.Вставить("Счет");
	
	Возврат ПараметрыОперации;
	
КонецФункции

Функция МассивВидыОперацийПрочийДоход()
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	
	Возврат МассивОпераций;
	
КонецФункции

Функция МассивВидыОперацийПрочийРасход()
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРКО.ПрочийРасход);
	
	Возврат МассивОпераций;
	
КонецФункции

Функция ВидыОперацийУплатаНалога()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.УплатаНалога);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	Возврат ВидыОпераций;
	
КонецФункции

Функция МассивДокументовАвтонумерации()
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить("ПоступлениеТоваровУслуг");
	МассивДокументов.Добавить("РеализацияТоваровУслуг");
	МассивДокументов.Добавить("СчетНаОплатуПокупателю");
	МассивДокументов.Добавить("ПоступлениеНаРасчетныйСчет");
	МассивДокументов.Добавить("СписаниеСРасчетногоСчета");
	МассивДокументов.Добавить("ПриходныйКассовыйОрдер");
	МассивДокументов.Добавить("РасходныйКассовыйОрдер");
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ИмяТабличнойЧасти(ТипДокумента)
	
	ИмяТабЧасти = "";
	Если ТипДокумента <> "Счёт-фактура" Тогда
		ИмяТабЧасти = ?(НРег(ТипДокумента) = "акт", "Услуги", "Товары");
	КонецЕсли;
	
	Возврат ИмяТабЧасти;
	
КонецФункции

Функция ВидДоговораСКонтрагентом(ИмяДокумента)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СчетНаОплатуПоставщика", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Соответствие.Вставить("ПоступлениеТоваровУслуг", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Соответствие.Вставить("СчетНаОплатуПокупателю", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Соответствие.Вставить("РеализацияТоваровУслуг", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Возврат Соответствие.Получить(ИмяДокумента);
	
КонецФункции

Функция НайтиСоздатьДокументРеализации(ПараметрыСчетаФактуры)
	
	ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", ПараметрыСчетаФактуры.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", ПараметрыСчетаФактуры.Сумма);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ПараметрыСчетаФактуры.Дата));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И РеализацияТоваровУслуг.СуммаДокумента = &СуммаДокумента
	|	И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = &Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументРеализации = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументРеализации) Тогда
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовыйДокумент,ПараметрыСчетаФактуры);
		НовыйДокумент.Номер = "";
		НовыйДокумент.СуммаДокумента = ПараметрыСчетаФактуры.Сумма;
		НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		НовыйДокумент.Записать();
		
		ДокументРеализации = НовыйДокумент.Ссылка;
		
	КонецЕсли;
	
	Возврат ДокументРеализации;
	
КонецФункции

Процедура ОпределитьСчетаУчетаДвиженияДенег(ТаблицаВидовОпераций)
	
	ТаблицаВидовОпераций.Колонки.Добавить("Счет");
	Для Каждого Строка Из ТаблицаВидовОпераций Цикл
		Если Не ЗначениеЗаполнено(Строка.СчетРасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Счет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетРасчетов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеДокументовДвиженияДенег(Данные)
	
	ЧисловыеРеквизиты = ЧисловыеРеквизитыДокументовДвиженияДенег();
	Для Каждого Строка Из Данные Цикл
		
		Для Каждого ИмяРеквизита Из ЧисловыеРеквизиты Цикл
			Строка[ИмяРеквизита] = ОбработатьЧисловойРеквизит(Строка[ИмяРеквизита]);
		КонецЦикла;
		
		Если НРег(Строка.ВидДенежныхСредств) = ТипДенегБанк() Тогда
			Строка.ТипДокумента = ?(ЗначениеЗаполнено(Строка.СуммаПоступления), "п.п. вх.", "п.п. исх.");
		ИначеЕсли НРег(Строка.ВидДенежныхСредств) = ТипДенегКасса() Тогда
			Строка.ТипДокумента = ?(ЗначениеЗаполнено(Строка.СуммаПоступления), "пко", "рко");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.СуммаПоступления) Тогда
			Строка.СуммаДокумента = Строка.СуммаПоступления;
		Иначе
			Строка.СуммаДокумента = Строка.СуммаСписания;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЧисловыеРеквизитыДокументовДвиженияДенег()
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("СуммаПоступления");
	ИменаРеквизитов.Добавить("СуммаСписания");
	ИменаРеквизитов.Добавить("СуммаУслуг");
	ИменаРеквизитов.Добавить("СуммаПатент");
	ИменаРеквизитов.Добавить("ДоходыУСН");
	ИменаРеквизитов.Добавить("РасходыУСН");
	
	Возврат ИменаРеквизитов;
	
КонецФункции

Функция ТипыДокументовСВидомУслуги()
	
	ИменаТипов = Новый Массив;
	ИменаТипов.Добавить("акт");
	Возврат ИменаТипов;
	
КонецФункции

Функция НоваяТаблицаДокументовКПроведению()
	
	ДокументыКПроведению = Новый ТаблицаЗначений;
	ДокументыКПроведению.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДокументыКПроведению.Колонки.Добавить("Ссылка");
	Возврат ДокументыКПроведению;
	
КонецФункции

Процедура ПровестиДокументы(ТаблицаДокументов)
	
	ТаблицаДокументов.Сортировать("Дата");
	Для каждого Строка Из ТаблицаДокументов Цикл
		Попытка
			ДокОбъект = Строка.Ссылка.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации(
				ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, ДокОбъект.Метаданные(), ДокОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

Функция НоваяТаблицаНоменклатуры()
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	КвалификаторСтроки = Новый КвалификаторыСтроки(1024);
	ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеНоменклатуры", Новый ОписаниеТипов("Строка", , КвалификаторСтроки));
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("Строка", , КвалификаторСтроки));
	ТаблицаНоменклатуры.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Строка", , КвалификаторСтроки));
	ТаблицаНоменклатуры.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Процедура НайтиСоздатьНоменклатуру(ТаблицаДанных, ТаблицаНоменклатуры, Ошибки)
	
	ТекстОшибки = НСтр("ru = 'Не удалось записать номенклатуру %1 по причине:
		|%2'");
	
	ТаблицаНовойНоменклатуры = НоваяТаблицаНоменклатуры();
	СуществующаяНоменклатура = ТаблицаНоменклатуры.ВыгрузитьКолонку("НаименованиеНоменклатуры");
	Для Каждого ПрочитанныеДанные Из ТаблицаДанных Цикл
		Для Каждого СтрокаТабличнойЧасти Из ПрочитанныеДанные.ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				Если СуществующаяНоменклатура.Найти(СтрокаТабличнойЧасти.Номенклатура) = Неопределено Тогда
					СтрокаНоменклатуры = ТаблицаНовойНоменклатуры.Добавить();
					СтрокаНоменклатуры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;
					СтрокаНоменклатуры.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
					СтрокаНоменклатуры.ТипДокумента = ПрочитанныеДанные.ТипДокумента;
					СуществующаяНоменклатура.Добавить(СтрокаТабличнойЧасти.Номенклатура);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаНовойНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ВидТовар = Справочники.ВидыНоменклатуры.НайтиСоздатьЭлементыТовар();
	ВидУслуга = Справочники.ВидыНоменклатуры.НайтиСоздатьЭлементыУслуга();
	ТипыДокументовДляУслуг = ТипыДокументовСВидомУслуги();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДанных", ТаблицаНовойНоменклатуры);
	Запрос.УстановитьПараметр("ВидТовар", ВидТовар);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабДанных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабДанных.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТабДанных.ТипДокумента КАК ТипДокумента
	|ПОМЕСТИТЬ ТабДанных
	|ИЗ
	|	&ТабДанных КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДанных.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТабДанных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабДанных.ТипДокумента КАК ТипДокумента,
	|	&ВидТовар КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТабНоменклатура
	|ИЗ
	|	ТабДанных КАК ТабДанных
	|ГДЕ
	|	ТабДанных.НаименованиеНоменклатуры <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабДанных.ЕдиницаИзмерения,
	|	ТабДанных.ТипДокумента,
	|	ТабДанных.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ТабНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабНоменклатура.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТабНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТабНоменклатура.ТипДокумента КАК ТипДокумента,
	|	ВЫБОР
	|		КОГДА Номенклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НоменклатураНайдена
	|ИЗ
	|	ТабНоменклатура КАК ТабНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТабНоменклатура.НаименованиеНоменклатуры = Номенклатура.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка,
	|	ТабНоменклатура.НаименованиеНоменклатуры,
	|	ТабНоменклатура.ТипДокумента,
	|	ТабНоменклатура.ВидНоменклатуры,
	|	ТабНоменклатура.ЕдиницаИзмерения";
	
	ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ЕдиницаИзмеренияПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	Для Каждого Строка Из ТаблицаРезультатЗапроса Цикл
		Если Строка.НоменклатураНайдена Тогда
			ДобавитьНовуюНоменклатуруВТаблицу(Строка, ТаблицаНоменклатуры);
			Продолжить;
		КонецЕсли;
		
		Реквизиты = НовыеРеквизитыНоменклатуры();
		ЗаполнитьЗначенияСвойств(Реквизиты, Строка);
		Реквизиты.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС;
		Если ТипыДокументовДляУслуг.Найти(НРег(Строка.ТипДокумента)) <> Неопределено Тогда
			Реквизиты.ВидНоменклатуры = ВидУслуга;
			Реквизиты.Услуга = Истина;
		КонецЕсли;
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.Заполнить(Реквизиты);
		НоваяНоменклатура.Наименование = Строка.НаименованиеНоменклатуры;
		НоваяНоменклатура.НаименованиеПолное = Строка.НаименованиеНоменклатуры;
		// Поскольку в загружаемом файле единица измерения может содержать абсолютно любое значение
		// используем конструкцию Попытка-Исключения, для обхода некорректных значений,
		// заведомо не являющихся кодом единицы измерения по классификатору
		Попытка
			НоваяНоменклатура.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(
				Строка.ЕдиницаИзмерения, Строка.ЕдиницаИзмерения);
		Исключение
			ЗаписьЖурналаРегистрации(
				ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.КлассификаторЕдиницИзмерения, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
		Если Не ЗначениеЗаполнено(НоваяНоменклатура.ЕдиницаИзмерения) Тогда
			НоваяНоменклатура.ЕдиницаИзмерения = ЕдиницаИзмеренияПоУмолчанию;
		КонецЕсли;
		
		Попытка
			
			НоваяНоменклатура.Записать();
			
			Строка.Ссылка = НоваяНоменклатура.Ссылка;
			
			ДобавитьНовуюНоменклатуруВТаблицу(Строка, ТаблицаНоменклатуры);
			
		Исключение
			
			ТекстСообщения = СтрШаблон(
				ТекстОшибки, Строка.НаименованиеНоменклатуры, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			ЗаписьЖурналаРегистрации(
				ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюНоменклатуруВТаблицу(Строка, ТаблицаНоменклатуры)
	
	НоваяСтрокаНоменклатуры = ТаблицаНоменклатуры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры, Строка);
	
КонецПроцедуры

Функция НовыеРеквизитыНоменклатуры()
	
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("НаименованиеНоменклатуры");
	РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения");
	РеквизитыНоменклатуры.Вставить("ВидСтавкиНДС");
	РеквизитыНоменклатуры.Вставить("ВидНоменклатуры");
	РеквизитыНоменклатуры.Вставить("Услуга");
	
	Возврат РеквизитыНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область Имена

Функция ИмяРеквизитыОрганизации()
	
	Возврат "Реквизиты";
	
КонецФункции

Функция ИмяКонтрагенты()
	
	Возврат "Контрагенты";
	
КонецФункции

Функция ИмяТипыДокументов()
	
	Возврат "ТипыДокументов";
	
КонецФункции

Функция ИмяВходящиеДокументы()
	
	Возврат "Входящие_документы";
	
КонецФункции

Функция ИмяИсходящиеДокументы()
	
	Возврат "Исходящие_документы";
	
КонецФункции

Функция ИмяДокументыДвиженияДенег()
	
	Возврат "Деньги";
	
КонецФункции

Функция ИмяРеквизитаДляРасчетныхСчетов()
	
	Возврат "РасчетныйСчет";
	
КонецФункции

Функция ОбозначениеРеквизитаДляРасчетныхСчетовВФайле()
	
	Возврат "р/с в банках:";
	
КонецФункции

Функция РазделительРасчетныхСчетов()
	
	Возврат "р/с";
	
КонецФункции

Функция ТипДенегБанк()
	
	Возврат "банк";
	
КонецФункции

Функция ТипДенегКасса()
	
	Возврат "касса";
	
КонецФункции

Функция ИмяДокументаСчетФактура()
	
	Возврат "СчетФактураВыданный";
	
КонецФункции

Функция ИмяДокументаОтчетОРозничныхПродажах()
	
	Возврат "ОтчетОРозничныхПродажах";
	
КонецФункции

Функция ИмяОперацииУплатыПенейШтрафовПоНалогам()
	
	Возврат "Пени, штрафы по налогам и взносам";
	
КонецФункции

Функция ИмяОперацииПроведенияДокументов()
	
	Возврат "ПроведениеДокументов";
	
КонецФункции

#КонецОбласти

Функция ТаблицаСопоставления(ИмяМакета)
	
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьКолонки = Макет.ПолучитьОбласть("КолонкиТаблицы");
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	Для НомерКолонки = 1 По ОбластьКолонки.ШиринаТаблицы Цикл
		ТаблицаСопоставления.Колонки.Добавить(ОбластьКолонки.Область(1, НомерКолонки).Текст, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	ОбластьПараметры = Макет.ПолучитьОбласть("ЗначенияТаблицы");
	Для НомерСтроки = 1 По ОбластьПараметры.ВысотаТаблицы Цикл
		
		НовСтрока = ТаблицаСопоставления.Добавить();
		Для НомерКолонки = 1 По ОбластьПараметры.ШиринаТаблицы Цикл
			НовСтрока[НомерКолонки - 1] = ОбластьПараметры.Область(НомерСтроки, НомерКолонки).Текст;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаСопоставления;
	
КонецФункции

Функция НоваяТаблицаДанных(СоставДанных)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Каждого ОписаниеРеквизита Из СоставДанных Цикл
		Если ТаблицаДанных.Колонки.Найти(ОписаниеРеквизита.ИмяРеквизита1С) = Неопределено Тогда
			Колонка = ТаблицаДанных.Колонки.Добавить(ОписаниеРеквизита.ИмяРеквизита1С);
		КонецЕсли;
	КонецЦикла;
	ТаблицаДанных.Колонки.Добавить("КоличествоОбъектов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗаполнитьТаблицуДанных(ТаблицаДанных, СоставДанных, Текст, СтрокаШапкиТаблицы, ИмяФайла)
	
	Начало = СтрокаШапкиТаблицы + 1;
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Если ИмяФайла = ИмяКонтрагенты() Тогда
		ОбязательныеРеквизиты = РеквизитыКонтрагентовОбязательныеКЗаполнению();
	Иначе
		ОбязательныеРеквизиты = Новый Массив;
	КонецЕсли;
	СтрокиКУдалению = Новый Массив;
	ДанныеОбъекта = Неопределено;
	// Прочитанный файл может содержать строки с переносом, например, когда у документа есть многострочный комментарий
	// нужно учесть подобные ситуации. Признаком их возникновения является наличие в строке кавычки " и отсутствие
	// закрывающей кавычки
	СоставнаяСтрока = Новый Массив;
	Для Сч = Начало По КоличествоСтрок Цикл
		СтрокаСформирована = Ложь;
		КавычкиОткрыты = Ложь;
		Пока Не СтрокаСформирована Цикл
			Строка = СтрПолучитьСтроку(Текст, Сч);
			СоставнаяСтрока.Добавить(Строка);
			КоличествоКавычекВСтроке = СтрЧислоВхождений(Строка, """");
			Если КоличествоКавычекВСтроке % 2 <> 0 Тогда
				// Нечетное количество кавычек сигнализирует о том что обнаружен перенос строки, либо завершение переноса
				Если Не КавычкиОткрыты Тогда
					// Обнаружили перенос строки, следовательно объект еще не прочитан полностью,
					// в связи с этим необходимо прочитать строки дальше, пока не будет найдена закрывающая кавычка
					Сч = Сч + 1;
					КавычкиОткрыты = Истина;
				Иначе
					// Обнаружили закрывающую кавычку, читаем завершающую строку и устанавливаем признак, оповещающий о том,
					// что объект полностью прочитан
					СтрокаСформирована = Истина;
				КонецЕсли;
			Иначе
				Если КавычкиОткрыты Тогда
					// Находимся внутри строки с переносом и перенос еще не завершен
					// читаем эту часть строки и переходим к следующей
					Сч = Сч + 1;
				Иначе
					// Признаков переноса не обнаружили
					СтрокаСформирована = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Строка = СтрСоединить(СоставнаяСтрока, Символы.ПС);
		СоставнаяСтрока.Очистить();
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли;
		// В реквизитах с типом "Строка" могут содержаться символы разделителя, которые по факту разделителями не являются
		// например в комментарии может содержаться символ ";"
		// Необходимо разделить строку на подстроки с учетом этой ситуации
		Подстроки = РазбитьНаПодстрокиБезУчетаРазделителейВнутриКавычек(Строка, Неопределено);
		ДобавленНовыйОбъект = Ложь;
		Для Каждого ОписаниеРеквизита Из СоставДанных Цикл
			Если ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Число") Тогда
				НайденноеЗначение = Подстроки[ОписаниеРеквизита.Значение];
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					Если Не ДобавленНовыйОбъект Тогда
						ДобавленНовыйОбъект = Истина;
						ДанныеОбъекта = ТаблицаДанных.Добавить();
					КонецЕсли;
					ДанныеОбъекта[ОписаниеРеквизита.ИмяРеквизита1С] = НайденноеЗначение;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОписаниеРеквизита.Значение) = Тип("ТаблицаЗначений") Тогда
				Если ДанныеОбъекта = Неопределено Или (Не ДобавленНовыйОбъект
					И Не ТипЗнч(ДанныеОбъекта[ОписаниеРеквизита.ИмяРеквизита1С]) = Тип("ТаблицаЗначений")) Тогда
					// Возникла ошибочная ситуация - читается строка с вложенными реквизитами объекта, но нет
					// данных об их владельце
					Продолжить;
				ИначеЕсли ДобавленНовыйОбъект Тогда
					// Читаем данные нового объекта, для вложенных реквизитов нужно добавить табличную часть
					ДанныеОбъекта[ОписаниеРеквизита.ИмяРеквизита1С] = НоваяТаблицаДанных(ОписаниеРеквизита.Значение);
				КонецЕсли;
				СтрокаВложенногоРеквизита = Неопределено;
				Для Каждого ОписаниеВложенногоРеквизита Из ОписаниеРеквизита.Значение Цикл
					Если ТипЗнч(ОписаниеВложенногоРеквизита.Значение) = Тип("Число")
						И ОписаниеВложенногоРеквизита.Значение <= Подстроки.ВГраница() Тогда
						ПрочитанноеЗначение = Подстроки[ОписаниеВложенногоРеквизита.Значение];
					Иначе
						Продолжить;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ПрочитанноеЗначение) Тогда
						Продолжить;
					КонецЕсли;
					Если СтрокаВложенногоРеквизита = Неопределено Тогда
						СтрокаВложенногоРеквизита = ДанныеОбъекта[ОписаниеРеквизита.ИмяРеквизита1С].Добавить();
					КонецЕсли;
					СтрокаВложенногоРеквизита[ОписаниеВложенногоРеквизита.ИмяРеквизита1С] = ПрочитанноеЗначение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
			Если ТаблицаДанных.Колонки.Найти(Реквизит) <> Неопределено
				И Не ЗначениеЗаполнено(ДанныеОбъекта[Реквизит]) Тогда
				СтрокиКУдалению.Добавить(ДанныеОбъекта);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокиКУдалению) Тогда
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ТаблицаДанных.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяФайла = ИмяДокументыДвиженияДенег() Тогда
		ОбработатьДанныеДокументовДвиженияДенег(ТаблицаДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьКавычки(Знач Значение)
	
	// Убираем первый и последний символ, если это кавычки
	Если СтрНачинаетсяС(Значение, """") И СтрЗаканчиваетсяНа(Значение, """") Тогда
		Значение = Сред(Значение, 2);
		Значение = Сред(Значение, 1, СтрДлина(Значение) - 1);
	КонецЕсли;
	
	Значение = СтрЗаменить(Значение, """""", """");
	
	Возврат Значение;
	
КонецФункции

Функция ДатаИзСтроки(ДатаСтрокой)
	
	ЗначениеДаты = ОбщегоНазначенияБПКлиентСервер.ПривестиСтрокуКДате(ДатаСтрокой);
	Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
		Возврат ЗначениеДаты;
	КонецЕсли;
	
	МассивДата = СтрРазделить(ДатаСтрокой, " ");
	// Массив должен содержать три элемента - число, месяц, год
	Если МассивДата.Количество() < 3 Тогда
		Возврат ЗначениеДаты;
	КонецЕсли;
	
	СоответствиеМесяцев = СоответствиеМесяцев();
	НомерМесяца = СоответствиеМесяцев.Получить(МассивДата[1]);
	Если НомерМесяца <> Неопределено Тогда
		МассивДата[1] = НомерМесяца;
		ДатаСтрокой = СтрСоединить(МассивДата, ".");
		
		ЗначениеДаты = ОбщегоНазначенияБПКлиентСервер.ПривестиСтрокуКДате(ДатаСтрокой);
	КонецЕсли;
	
	Возврат ЗначениеДаты;
	
КонецФункции

Функция ОбработатьЧисловойРеквизит(ИсходнаяСтрока)
	
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ЧастиСтроки = Новый Массив;
	// Отбираем только цифры, точки и запятые
	Для Сч = 1 По ДлинаСтроки Цикл
		ОчереднойСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОчереднойСимвол)
			Или СимволЯвляетсяТочкойИлиЗапятой(ОчереднойСимвол) Тогда
			ЧастиСтроки.Добавить(ОчереднойСимвол);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЧислоСтрокой = СтрСоединить(ЧастиСтроки);
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧислоСтрокой);
	Если Результат = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция РазбитьНаПодстрокиБезУчетаРазделителейВнутриКавычек(Строка, Подстроки, Уровень = 0)
	
	Если Подстроки = Неопределено Тогда
		Подстроки = Новый Массив;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат Подстроки;
	Иначе
		ОткрывающаяКавычка = СтрНайти(Строка, """");
		Если ОткрывающаяКавычка = 0 Тогда
			Результат = Строка;
		Иначе
			Результат = Лев(Строка, ОткрывающаяКавычка - 2);
		КонецЕсли;
		Если Не ОткрывающаяКавычка = 1 Тогда
			НовыеПодстроки = СтрРазделить(Результат, ";", Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подстроки, НовыеПодстроки, Ложь);
		КонецЕсли;
	КонецЕсли;
	Если ОткрывающаяКавычка = 0 Тогда
		Возврат Подстроки;
	КонецЕсли;
	Строка = Сред(Строка, ОткрывающаяКавычка + 1);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Если КодСимвола(Строка, Сч) = КодСимволаДвойнойКавычки() Тогда // Нашли кавычку "
			Если КодСимвола(Строка, Сч + 1) = КодСимволаДвойнойКавычки() Тогда
				// Две подряд кавычки "" внутри строки означают одинарную кавычку
				// это не закрывающая кавычка, которую мы ищем
				Сч = Сч + 1;
			Иначе
				Результат = Лев(Строка, Сч - 1);
				Подстроки.Добавить(Результат);
				ОставшаясяСтрока = Сред(Строка, Сч + 2);
				Возврат РазбитьНаПодстрокиБезУчетаРазделителейВнутриКавычек(
					ОставшаясяСтрока, Подстроки, Уровень + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Подстроки.Добавить(Строка);
	Возврат Подстроки;
	
КонецФункции

Функция СоответствиеМесяцев()

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("января",1);
	Соответствие.Вставить("февраля",2);
	Соответствие.Вставить("марта",3);
	Соответствие.Вставить("апреля",4);
	Соответствие.Вставить("мая",5);
	Соответствие.Вставить("июня",6);
	Соответствие.Вставить("июля",7);
	Соответствие.Вставить("августа",8);
	Соответствие.Вставить("сентября",9);
	Соответствие.Вставить("октября",10);
	Соответствие.Вставить("ноября",11);
	Соответствие.Вставить("декабря",12);
	
	Возврат Соответствие;
	
КонецФункции

Процедура ЗаполнитьЗначениеВНайденнойСтроке(Таблица, ИмяРеквизита, ИмяКолонки, Значение)
	
	НайденнаяСтрока = Таблица.Найти(ИмяРеквизита, ИмяКолонки);
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция НовоеОписаниеЗагружаемыхФайлов()
	
	ОписаниеЗагружаемыхФайлов = Новый ТаблицаЗначений;
	ОписаниеЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	ОписаниеЗагружаемыхФайлов.Колонки.Добавить("Заголовок"); // Заголовок находится непосредственно в тексте файла
	ОписаниеЗагружаемыхФайлов.Колонки.Добавить("Файл");
	ОписаниеЗагружаемыхФайлов.Колонки.Добавить("Обязательный");
	Возврат ОписаниеЗагружаемыхФайлов;
	
КонецФункции

Процедура ЗаполнитьОписаниеИменамиФайлов(Описание)
	
	ДобавитьСтрокуВОписаниеФайлов(Описание, ИмяРеквизитыОрганизации(), "реквизиты организации", Истина);
	ДобавитьСтрокуВОписаниеФайлов(Описание, ИмяРеквизитыОрганизации(), "реквизиты ип", Истина);
	ДобавитьСтрокуВОписаниеФайлов(Описание, ИмяКонтрагенты(), "контрагенты", Истина);
	ДобавитьСтрокуВОписаниеФайлов(Описание, ИмяИсходящиеДокументы(), "исходящие документы");
	ДобавитьСтрокуВОписаниеФайлов(Описание, ИмяДокументыДвиженияДенег(), "деньги");
	ДобавитьСтрокуВОписаниеФайлов(Описание, ИмяВходящиеДокументы(), "входящие документы");
	
КонецПроцедуры

Процедура ДобавитьСтрокуВОписаниеФайлов(Описание, Имя, Заголовок, Обязательный = Ложь)
	
	НоваяСтрока = Описание.Добавить();
	НоваяСтрока.ИмяФайла = Имя;
	НоваяСтрока.Заголовок = Заголовок;
	НоваяСтрока.Обязательный = Обязательный;
	
КонецПроцедуры

Процедура ДобавитьФайлыВОписание(НайденныеФайлы, ОписаниеФайлов)
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя);
		ПерваяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Подстроки = СтрРазделить(ПерваяСтрока, ";", Истина);
		Заголовок = Подстроки[0];
		НайденнаяСтрокаВОписании = ОписаниеФайлов.Найти(НРег(Заголовок), "Заголовок");
		Если НайденнаяСтрокаВОписании <> Неопределено Тогда
			НайденнаяСтрокаВОписании.Файл = Файл;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СимволЯвляетсяТочкойИлиЗапятой(Символ)
	
	Код = КодСимвола(Символ);
	// 44 и 46 - коды символов точки и запятой
	Возврат Код = 44 Или Код = 46;
	
КонецФункции

Функция КодСимволаДвойнойКавычки()
	
	Возврат 34;
	
КонецФункции

#КонецОбласти

#КонецЕсли



