#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Ключ") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанные(Параметры.Ключ);
	
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторОрганизацииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначения = Тип("РегистрСведенийКлючЗаписи.УчетныеЗаписиЭДО");
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Новый Структура("ИдентификаторЭДО", ИдентификаторОрганизации);
	КлючЗаписи = Новый(ТипЗначения, ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписи);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Принять(Команда)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("Наименование", КонтрагентНаименование);
		РеквизитыКонтрагента.Вставить("ИНН"         , КонтрагентИНН);
		РеквизитыКонтрагента.Вставить("КПП"         , КонтрагентКПП);
		
		Контрагент = СоздатьНовогоКонтрагента(РеквизитыКонтрагента);
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьОтправкуОтветаНаПриглашение("Принять");
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьОтозватьПриглашение(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отозвать(Команда)
	
	ОтклонитьОтозватьПриглашение(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОткрытьПомощникОтправкиПриглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОписание(Команда)
	
	БуферОбмена = СтрШаблон(
		"<!DOCTYPE html>
		|<html>
		|	<body onload='copy()'>
		|		<input id='input' type='text'/>
		|		<script>
		|			function copy() {
		|				var text = '%1';
		|				var ua = navigator.userAgent;
		|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
		|					window.clipboardData.setData('Text', text);
		|				} else {
		|					var copyText = document.getElementById('input');
		|					copyText.value = text;
		|					copyText.select();
		|					document.execCommand('copy');
		|				}
		|			}
		|		</script>
		|	</body>
		|</html>", ОписаниеОшибки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанные(КлючПриглашения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент) КАК КонтрагентПредставление,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК КонтрагентНаименование,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК КонтрагентИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КонтрагентКПП,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ТекстПриглашения КАК ТекстПриглашения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Email КАК ЭлектроннаяПочта,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОператорЭДО КАК ОператорКонтрагента,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорОрганизации
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", КлючПриглашения.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", КлючПриглашения.ИдентификаторКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусПодключения        = Выборка.Статус;
	Контрагент               = Выборка.Контрагент;
	КонтрагентНаименование   = ?(ЗначениеЗаполнено(Контрагент),
		Выборка.КонтрагентПредставление, Выборка.КонтрагентНаименование);
	КонтрагентИНН            = Выборка.КонтрагентИНН;
	КонтрагентКПП            = Выборка.КонтрагентКПП;
	ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
	Организация              = Выборка.Организация;
	ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
	ОписаниеОшибки           = Выборка.ОписаниеОшибки;
	ТекстПриглашения         = Выборка.ТекстПриглашения;
	ЭлектроннаяПочта         = Выборка.ЭлектроннаяПочта;
	ОператорКонтрагента      = Выборка.ОператорКонтрагента;
	ОператорОрганизации      = Выборка.ОператорОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПредставлениеКонтрагента = Новый ФорматированнаяСтрока(КонтрагентНаименование,,,,ПолучитьНавигационнуюСсылку(Контрагент));
	ИначеЕсли ЗначениеЗаполнено(КонтрагентКПП) Тогда
		Шаблон = НСтр("ru = '%1 (ИНН: %2 КПП: %3)'");
		ПредставлениеКонтрагента = Новый ФорматированнаяСтрока(
			СтрШаблон(Шаблон, КонтрагентНаименование, КонтрагентИНН, КонтрагентКПП));
	Иначе
		Шаблон = НСтр("ru = '%1 (ИНН: %2)'");
		ПредставлениеКонтрагента = Новый ФорматированнаяСтрока(
			СтрШаблон(Шаблон, КонтрагентНаименование, КонтрагентИНН));
	КонецЕсли;
	
	Элементы.ИдентификаторКонтрагента.Видимость = ИдентификаторКонтрагента <> КонтрагентИНН;
	
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие Тогда
		Элементы.Принять.Видимость   = Истина;
		Элементы.Принять.КнопкаПоУмолчанию = Истина;
		Элементы.Отклонить.Видимость = Истина;
		Элементы.Отозвать.Видимость = Ложь;
		
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.Принято Тогда
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.ОжидаемСогласия Тогда
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	Иначе
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = Ложь;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Элементы.ОтправитьПовторно.Видимость = СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено
		ИЛИ СтатусПодключения = Перечисления.СтатусыПриглашений.Ошибка
		ИЛИ СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить Тогда
		Элементы.ОтправитьПовторно.Заголовок = НСтр("ru = 'Отправить'");
	Иначе
		Элементы.ОтправитьПовторно.Заголовок = НСтр("ru = 'Отправить повторно'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Элементы.ГруппаОписаниеОшибки.Видимость = Истина;
		Элементы.БуферОбмена.Видимость = Истина;
		Элементы.ДекорацияОписаниеОшибки.Заголовок = ОписаниеОшибки;
	Иначе
		Элементы.ГруппаОписаниеОшибки.Видимость = Ложь;
		Элементы.БуферОбмена.Видимость = Ложь;
	КонецЕсли;
	
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.Ошибка
		Или СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаПредупреждения;
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.Принято Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаКорректногоКонтрагентаВДокументе;
	Иначе
		ЦветФона = ЦветаСтиля.ДосьеПанельРазделовЦвет;
	КонецЕсли;
	
	Элементы.ГруппаСостояние.ЦветФона = ЦветФона;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовогоКонтрагента(Знач РеквизитыКонтрагента)
	
	Возврат ОбменСКонтрагентамиСлужебный.НовыйКонтрагентПоРеквизитам(РеквизитыКонтрагента);
	
КонецФункции

&НаКлиенте
Процедура ОтклонитьОтозватьПриглашение(Команда)
	
	Если СтатусПодключения <> ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
		НачатьОтправкуОтветаНаПриглашение(Команда.Имя);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаПриглашениеПослеВопроса", ЭтотОбъект, Команда.Имя);
		ТекстСообщения = 
			НСтр("ru = 'После разрыва связи с контрагентом больше не будет возможности обмениваться электронными документами с контрагентом.
				|Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашениеПослеВопроса(Результат, ИмяКоманды) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтправкуОтветаНаПриглашение(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуОтветаНаПриглашение(Ответ)
	
	ОчиститьСообщения();
	
	Если Ответ = "Отозвать" Тогда
		Элементы.Отозвать.Доступность = Ложь;
	Иначе
		Элементы.Принять.Доступность = Ложь;
		Элементы.Отклонить.Доступность = Ложь;
	КонецЕсли;
	
	Контекст = Новый Структура("Ответ", Ответ);
	Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаПриглашениеПослеПолученияМаркера", ЭтотОбъект, Контекст);
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОрганизации);
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(Оповещение, МассивИдентификаторов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашениеПослеПолученияМаркера(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соответствие = Неопределено;
	Маркер = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", Соответствие)
		И ТипЗнч(Соответствие) = Тип("Соответствие") Тогда
		
		СтСертификата = Соответствие.Получить(ИдентификаторОрганизации);
		Если ТипЗнч(СтСертификата) = Тип("Структура") Тогда
			СтСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Маркер) Тогда
		Если Контекст.Ответ = "Принять" Тогда
			ШаблонОшибки = НСтр("ru = 'При принятии приглашения возникли ошибки.'");
		ИначеЕсли Контекст.Ответ = "Отклонить" Тогда
			ШаблонОшибки = НСтр("ru = 'При отклонении приглашения возникли ошибки.'");
		ИначеЕсли Контекст.Ответ = "Отозвать" Тогда
			ШаблонОшибки = НСтр("ru = 'При отзыве приглашения возникли ошибки.'");
		Иначе
			ШаблонОшибки = "";
		КонецЕсли;
		
		ОписаниеОшибки = ШаблонОшибки + Символы.ПС
			+ НСтр("ru = 'Необходимо выполнить проверку соединения с оператором в учетной записи ЭДО.'");
		
		Результат = Новый Структура("Статус, ОписаниеОшибки",
			"Ошибка", ОписаниеОшибки);
		
		ЗавершитьОтправкуОтветаНаПриглашение(Результат, Контекст);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Маркер"             , Маркер);
	ПараметрыПроцедуры.Вставить("Идентификатор"      , ИдентификаторКонтрагента);
	ПараметрыПроцедуры.Вставить("ПриглашениеПринято" , Контекст.Ответ = "Принять");
	
	ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента" , ИдентификаторКонтрагента);
	ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации" , ИдентификаторОрганизации);
	ПараметрыПроцедуры.Вставить("Получатель"               , Контрагент);
	
	ДлительнаяОперация = ОтправитьОтветНаПриглашение(УникальныйИдентификатор, ПараметрыПроцедуры);
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		ЗавершитьОтправкуОтветаНаПриглашение(ДлительнаяОперация, Контекст);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьОтправкуОтветаНаПриглашение", ЭтотОбъект, Контекст);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьОтветНаПриглашение(Знач УникальныйИдентификатор, Знач ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ответ на приглашение ЭДО'");
	
	ПараметрыПроцедуры.Вставить("СпособОбменаЭД" , ПолучитьСпособОбмена(ПараметрыПроцедуры.ИдентификаторОрганизации));
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСКонтрагентамиСлужебный.ПринятьОтклонитьКонтактЧерезОператораЭДО", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОтправкуОтветаНаПриглашение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
		
	ИначеЕсли Результат.Статус <> "Выполнено"
		Или Результат.Свойство("АдресРезультата")
		И ПолучитьИзВременногоХранилища(Результат.АдресРезультата) <> Истина Тогда
		
		ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ОписаниеОшибки",
			НСтр("ru = 'При отправке ответа на приглашение произошла ошибка.
				|Подробнее см. в журнале регистрации'"));
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		
		Если Контекст.Ответ = "Отозвать" Тогда
			Элементы.Отозвать.Доступность = Истина;
		Иначе
			Элементы.Принять.Доступность   = Истина;
			Элементы.Отклонить.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		Возврат;
	КонецЕсли;
	
	Если Контекст.Ответ = "Принять" Тогда
		Текст = НСтр("ru = 'Приглашение принято.
			|Теперь можно обмениваться с контрагентом электронными документами.'");
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		
	ИначеЕсли Контекст.Ответ = "Отклонить" Тогда
		Текст = НСтр("ru = 'Приглашение отклонено.
			|Теперь прием и отправка электронных документов невозможны.'");
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		
	ИначеЕсли Контекст.Ответ = "Отозвать" Тогда
		Текст = НСтр("ru = 'Приглашение отозвано.
			|Теперь прием и отправка электронных документов невозможны.'");
		Элементы.Отозвать.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.НадписьВыполнено.Заголовок = Текст;
	
	Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнено;
	
	Оповестить("ОбновитьСостояниеПриглашений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособОбмена(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СпособОбменаЭД;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПомощникОтправкиПриглашения()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Контрагент",  Контрагент);
	ПараметрыФормы.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Если ИдентификаторКонтрагента <> КонтрагентИНН Тогда
		ПараметрыФормы.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	ИначеЕсли ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		ПараметрыФормы.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	ИначеЕсли ЗначениеЗаполнено(ОператорКонтрагента) Тогда
		ПараметрыФормы.Вставить("ОператорКонтрагента", ОператорКонтрагента);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьФормуПослеОтправкиПриглашения", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Форма.ПомощникОтправкиПриглашения",
		ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПослеОтправкиПриглашения(Результат, Контекст) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	
	КлючПриглашения = Новый Структура;
	КлючПриглашения.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	КлючПриглашения.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	
	ЗаполнитьДанные(КлючПриглашения);
	
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти